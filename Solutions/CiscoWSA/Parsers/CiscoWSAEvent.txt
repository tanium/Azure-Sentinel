// USAGE:
// 1. Open Log Analytics/Azure Sentinel Logs blade. Copy the query below and paste into the Logs query window. 
// 2. In the query window, on the second line of the query, enter the hostname(s) of your Cisco WSA device(s) and any other unique identifiers for the logstream. 
//    For example: | where Computer in ("server1", "server2")
// 3. Click the Save button above the query. A pane will appear on the right, select "as Function" from the drop down. Enter a Function Name.
//    It is recommended to name the Function Alias, as CiscoWSAEvent 
// 4. Kusto Functions can typically take up to 15 minutes to activate. You can then use function alias from any other queries (e.g. CiscoWSAEvent | take 10).
// Reference : Using functions in Azure monitor log queries : https://docs.microsoft.com/azure/azure-monitor/log-query/functions
// **** Access Logs (non-w3c format) ****
// This Kusto function expects the following fiels order for CiscoWSA Access logs (Squid type):
// %t %e %a %w %h %s %1r %2r %A %H %d %c %D %Xr %?BLOCK_SUSPECT_ USER_AGENT, MONITOR_SUSPECT_ USER_AGENT?% < User-Agent:%!%-%
// **** Access Logs (w3c format) ****
// This Kusto function expects the following fiels order for CiscoWSA logs in w3c format:
// date time timestamp x-elapsed-time referer c-ip sc-result-code cs-bytes sc-body-size cs-method cs-url s-hostname cs-uri cs-username "cs-mime-type" x-acltag X-Forwarded-For c-port s-computerName s-port cs-version x-webcat-code-abbr x-wbrs-score x-webroot-scanverdict x-webroot-threat-name x-webroot-trr x-webroot-spyid x-webroot-trace-id x-mcafee-scanverdict x-mcafee-filename x-mcafee-av-scanerror x-mcafee-av-detecttype x-mcafee-av-virustype x-mcafee-virus-name x-sophos-scanverdict x-sophos-scanerror x-sophos-file-name x-sophos-virus-name x-ids-verdict x-icap-verdict x-webcat-req-code-abbr x-webcat-resp-code-abbr x-wbrs-threat-type x-avc-app x-avc-type x-avc-behavior x-request-rewrite x-avg-bw x-bw-throttled user-type x-resp-dvs-threat-name x-resp-dvs-scanverdict x-resp-dvs-verdictname x-req-dvs-threat-name x-req-dvs-scanverdict x-req-dvs-verdictname x-amp-verdict x-amp-malware-name x-amp-score x-amp-upload x-amp-filename x-amp-sha x-suspect-user-agent bytes
// Description of log fields for different formats can be found here: https://www.cisco.com/c/en/us/td/docs/security/wsa/wsa_14-0/User-Guide/b_WSA_UserGuide_14_0/b_WSA_UserGuide_11_7_chapter_010101.html#con_1621159
let cisco_wsa_access_logs =() {
Syslog
| where ProcessName in ("cisco_wsa")
| extend LogType = iff(SyslogMessage matches regex @"\A\d{10}\.\d{3}\s\d+\s\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}", "Squid Logs" , iif(SyslogMessage matches regex @"\A\d{4}\-\d{2}\-\d{2}\s\d{2}:\d{2}:\d{2}\s\d{10}\.\d{3}", "W3C Logs",dynamic("")))
| extend EventVendor = 'Cisco'
| extend EventProduct = 'Web Security Appliance'
| extend EventType = 'Access Log'
| extend EventFields = split(SyslogMessage, ' ')
| extend ScanningVerdictFields = iif(LogType == "Squid Logs", parse_csv(tostring(extract(@'<(.*?)>', 1, SyslogMessage))), dynamic(""))
| extend EventStartTime = case(LogType has "Squid Logs", unixtime_seconds_todatetime(todouble(EventFields[0])),
						  LogType has "W3C Logs", todatetime(strcat(EventFields[0], ' ', EventFields[1])), datetime(null))
| extend Latency = case(LogType has "Squid Logs", toint(EventFields[1]),
                   LogType has "W3C Logs", toint(EventFields[3]), int(null))
| extend SrcIpAddr = case(LogType has "Squid Logs", tostring(EventFields[2]),
					 LogType has "W3C Logs", tostring(EventFields[5]), "")
| extend EventResultDetails = case(LogType has "Squid Logs", extract(@'\A(.*?)\/[1-5]\d{2}', 1, tostring(EventFields[3])),
							LogType has "W3C Logs", tostring(EventFields[6]), "")
| extend HttpStatusCode = iif(LogType == "Squid Logs", extract(@'\A.*?\/([1-5]\d{2})', 1, tostring(EventFields[3])), dynamic(""))
| extend DstBytes = case(LogType has "Squid Logs", toint(EventFields[4]),
					LogType has "W3C Logs", toint(EventFields[8]), int(null))
| extend HttpRequestMethod = case(LogType has "Squid Logs", tostring(EventFields[5]),
							 LogType has "W3C Logs", tostring(EventFields[9]), "")
| extend UrlOriginal = case(LogType has "Squid Logs", tostring(EventFields[6]),
							 LogType has "W3C Logs", tostring(EventFields[10]), "")
| extend SrcUserName = case(LogType has "Squid Logs", tostring(EventFields[7]),
							 LogType has "W3C Logs", tostring(EventFields[13]), "")
| extend ContactedServerCode = iif(LogType == "Squid Logs", extract(@'\A(\w+)\/\d{1,3}', 1, tostring(EventFields[8])), dynamic(""))
| extend DstIpAddr = case(LogType has "Squid Logs", extract(@'\A\w+\/(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})', 1, tostring(EventFields[8])),
					 LogType has "W3C Logs", tostring(EventFields[11]), "")
| extend DstDvcHostname = case(LogType has "Squid Logs", extract(@'\A\w+\/(\D+)', 1, tostring(EventFields[8])),
						LogType has "W3C Logs", tostring(EventFields[18]), "")
| extend ResponseBodyMimeType = case(LogType has "Squid Logs", tostring(EventFields[9]),
								LogType has "W3C Logs", tostring(EventFields[14]), "")
| extend DvcAction = case(LogType has "Squid Logs", extract(@'\A(.*?)\-', 1, tostring(EventFields[10])),
					LogType has "W3C Logs", tostring(EventFields[15]), "")
| extend PolicyGroupName = iif(LogType == "Squid Logs", extract(@'\A.*?\-(.*?)\-', 1, tostring(EventFields[10])), dynamic(""))
| extend IdentityPolicyGroupName =  iif(LogType == "Squid Logs", extract(@'\A.*?\-.*?\-(.*?)\-', 1, tostring(EventFields[10])), dynamic(""))
| extend OutboundMalwareScanningPolicyGroupName =  iif(LogType == "Squid Logs", extract(@'\A.*?\-.*?\-.*?\-(.*?)\-', 1, tostring(EventFields[10])), dynamic(""))
| extend DataSecurityPolicyGroupName = iif(LogType == "Squid Logs", extract(@'\A.*?\-.*?\-.*?\-.*?\-(.*?)\-', 1, tostring(EventFields[10])), dynamic(""))
| extend ExternalDplPolicyGroupName = iif(LogType == "Squid Logs", extract(@'\A.*?\-.*?\-.*?\-.*?\-.*?\-(.*?)\-', 1, tostring(EventFields[10])), dynamic(""))
| extend RoutingPolicy = iif(LogType == "Squid Logs", extract(@'\A(.*?\-){6}(.*)', 2, tostring(EventFields[10])), dynamic(""))
| extend SuspectedUserAgent = case(LogType has "Squid Logs", tostring(EventFields[-1]),
							  LogType has "W3C Logs", tostring(EventFields[62]), "")
| extend UrlCategory = case(LogType has "Squid Logs", tostring(ScanningVerdictFields[0]),
						LogType has "W3C Logs", tostring(EventFields[21]), "")
| extend WebReputationScore = iif(LogType == "Squid Logs", tostring(ScanningVerdictFields[1]), dynamic(""))
| extend MalwareScanningVerdict = iif(LogType == "Squid Logs", tostring(ScanningVerdictFields[2]), dynamic(""))
| extend ThreatName = iif(LogType == "Squid Logs", tostring(ScanningVerdictFields[3]), dynamic(""))
| extend ThreatRiskRatioValue = iif(LogType == "Squid Logs", tostring(ScanningVerdictFields[4]), dynamic(""))
| extend ThreatIdentifier = iif(LogType == "Squid Logs", tostring(ScanningVerdictFields[5]), dynamic(""))
| extend TraceIdentifier = iif(LogType == "Squid Logs", tostring(ScanningVerdictFields[6]), dynamic(""))
| extend McAfeeMalwareScanningVerdict = case(LogType has "Squid Logs", tostring(ScanningVerdictFields[7]),
										LogType has "W3C Logs", tostring(EventFields[28]), "")
| extend McAfeeScannedFileName = case(LogType has "Squid Logs", tostring(ScanningVerdictFields[8]),
								LogType has "W3C Logs", tostring(EventFields[29]), "")
| extend McAfeeScanError = case(LogType has "Squid Logs", tostring(ScanningVerdictFields[9]),
							LogType has "W3C Logs", tostring(EventFields[30]), "")
| extend McAfeeDetectionType = case(LogType has "Squid Logs", tostring(ScanningVerdictFields[10]),
								LogType has "W3C Logs", tostring(EventFields[31]), "")
| extend McAfeeThreatCategory = case(LogType has "Squid Logs", tostring(ScanningVerdictFields[11]),
								LogType has "W3C Logs", tostring(EventFields[32]), "")
| extend McAfeeThreatName = case(LogType has "Squid Logs", tostring(ScanningVerdictFields[12]),
							LogType has "W3C Logs", tostring(EventFields[33]), "")
| extend SophosScanningVerdict = case(LogType has "Squid Logs", tostring(ScanningVerdictFields[13]),
								LogType has "W3C Logs", tostring(EventFields[34]), "")
| extend SophosScanReturnCode = case(LogType has "Squid Logs", tostring(ScanningVerdictFields[14]),
								LogType has "W3C Logs", tostring(EventFields[35]), "")
| extend SophosScannedFileName = case(LogType has "Squid Logs", tostring(ScanningVerdictFields[15]),
								LogType has "W3C Logs", tostring(EventFields[36]), "")
| extend SophosThreatName = case(LogType has "Squid Logs", tostring(ScanningVerdictFields[16]),
							LogType has "W3C Logs", tostring(EventFields[37]), "")
| extend CiscoDataSecurityScanningVerdict = case(LogType has "Squid Logs", case(tostring(ScanningVerdictFields[17]) == '0', 'Allow',
                                             tostring(ScanningVerdictFields[17]) == '1', 'Block',
                                             '-'),
											 LogType has "W3C Logs", tostring(EventFields[38]), "")
| extend ExternalDlpScannningVerdict = case(LogType has "Squid Logs", case(tostring(ScanningVerdictFields[18]) == '0', 'Allow',
                                       tostring(ScanningVerdictFields[18]) == '1', 'Block',
                                       '-'), LogType has "W3C Logs", tostring(EventFields[39]), "")
| extend ResponseSideScanningUrlCategoryVerdict = case(LogType has "Squid Logs", tostring(ScanningVerdictFields[19]),
												  LogType has "W3C Logs", tostring(EventFields[41]), "")
| extend DcaUrlCategoryVerdict = iif(LogType == "Squid Logs", tostring(ScanningVerdictFields[20]), dynamic(""))
| extend ResponseThreatCategory = iif(LogType == "Squid Logs", tostring(ScanningVerdictFields[21]), dynamic(""))
| extend WebReputationThreatType = iif(LogType == "Squid Logs", tostring(ScanningVerdictFields[22]), dynamic(""))
| extend GteEncapsulatedUrl = iif(LogType == "Squid Logs", tostring(ScanningVerdictFields[23]), dynamic(""))
| extend AvcApplicationName = case(LogType has "Squid Logs", tostring(ScanningVerdictFields[24]),
								LogType has "W3C Logs", tostring(EventFields[43]), "")
| extend AvcApplicationType = case(LogType has "Squid Logs", tostring(ScanningVerdictFields[25]),
								LogType has "W3C Logs", tostring(EventFields[44]), "")
| extend AvcApplicationBehavior = case(LogType has "Squid Logs", tostring(ScanningVerdictFields[26]),
								LogType has "W3C Logs", tostring(EventFields[45]), "")
| extend SafeBrowsingScanningVerdict = case(LogType has "Squid Logs", tostring(ScanningVerdictFields[27]),
								LogType has "W3C Logs", tostring(EventFields[46]), "")
| extend ['AvgBandwidth(Kb/sec)'] = case(LogType has "Squid Logs", todouble(ScanningVerdictFields[28]),
								LogType has "W3C Logs", todouble(EventFields[47]), double(null))
| extend Throttled = case(LogType has "Squid Logs", tostring(ScanningVerdictFields[29]),
					LogType has "W3C Logs", tostring(EventFields[48]), "")
| extend UserType = case(LogType has "Squid Logs", tostring(ScanningVerdictFields[30]),
					LogType has "W3C Logs", tostring(EventFields[49]), "")
| extend RequestSideAntiMalwareScanningVerdict = iif(LogType == "Squid Logs", tostring(ScanningVerdictFields[31]), dynamic(""))
| extend ClientRequestThreatName = iif(LogType == "Squid Logs", tostring(ScanningVerdictFields[32]), dynamic(""))
| extend AmpScanningVerdict = case(LogType has "Squid Logs", tostring(ScanningVerdictFields[33]),
					LogType has "W3C Logs", tostring(EventFields[56]), "")
| extend AmpThreatName = case(LogType has "Squid Logs", tostring(ScanningVerdictFields[34]),
					LogType has "W3C Logs", tostring(EventFields[57]), "")
| extend AmpReputationScore = case(LogType has "Squid Logs", tostring(ScanningVerdictFields[35]),
					LogType has "W3C Logs", tostring(EventFields[58]), "")
| extend AmpUploadIndicator = case(LogType has "Squid Logs", tostring(ScanningVerdictFields[36]),
					LogType has "W3C Logs", tostring(EventFields[59]), "")
| extend AmpFileName = case(LogType has "Squid Logs", tostring(ScanningVerdictFields[37]),
					LogType has "W3C Logs", tostring(EventFields[60]), "")
| extend AmpFileHashSha256 = case(LogType has "Squid Logs", tostring(ScanningVerdictFields[38]),
					LogType has "W3C Logs", tostring(EventFields[61]), "")
| extend ArchiveScanningVerdict = iif(LogType == "Squid Logs", tostring(ScanningVerdictFields[39]), dynamic(""))
| extend ArchiveScanningVerdictDetail = iif(LogType == "Squid Logs", tostring(ScanningVerdictFields[40]), dynamic(""))
| extend ArchiveScannerFileVerdict = iif(LogType == "Squid Logs", tostring(ScanningVerdictFields[41]), dynamic(""))
| extend WebTapBehavior = iif(LogType == "Squid Logs", tostring(ScanningVerdictFields[42]), dynamic(""))
| extend YouTubeUrlCategory = iif(LogType == "Squid Logs", tostring(ScanningVerdictFields[43]), dynamic(""))
| extend BlockedFileTypeDetail = iif(LogType == "Squid Logs", extract_all(@"(?P<key>[a-zA-Z0-9- ]+):(?P<value>[a-zA-Z0-9-_:/@.#{};= ]+)", dynamic(["key","value"]), tostring(ScanningVerdictFields[44])), dynamic(""))
| extend HttpReferrerOriginal = iif(LogType == "W3C Logs", tostring(EventFields[4]), dynamic(""))
| extend SrcBytes = iif(LogType == "W3C Logs", toint(EventFields[7]), dynamic(null))
| extend RequestUri = iif(LogType == "W3C Logs", tostring(EventFields[12]), dynamic(""))
| extend HttpRequestXff = iif(LogType == "W3C Logs", tostring(EventFields[16]), dynamic(""))
| extend SrcPortNumber = iif(LogType == "W3C Logs", tostring(EventFields[17]), dynamic(""))
| extend DstPortNumber = iif(LogType == "W3C Logs", tostring(EventFields[19]), dynamic(""))
| extend NetworkApplicationProtocol = iif(LogType == "W3C Logs", tostring(EventFields[20]), dynamic(""))
| extend WbrsScore = iif(LogType == "W3C Logs", tostring(EventFields[22]), dynamic(""))
| extend WebrootScanningVerdict = iif(LogType == "W3C Logs", tostring(EventFields[23]), dynamic(""))
| extend WebrootThreatName = iif(LogType == "W3C Logs", tostring(EventFields[24]), dynamic(""))
| extend WebrootThreatRiskRatio = iif(LogType == "W3C Logs", tostring(EventFields[25]), dynamic(""))
| extend WebrootSpyId = iif(LogType == "W3C Logs", tostring(EventFields[26]), dynamic(""))
| extend WebrootTraceId = iif(LogType == "W3C Logs", tostring(EventFields[27]), dynamic(""))
| extend RequestSideScanningUrlCategoryVerdict = iif(LogType == "W3C Logs", tostring(EventFields[40]), dynamic(""))
| extend WebReputationThreatCategory = iif(LogType == "W3C Logs", tostring(EventFields[42]), dynamic(""))
| extend ResponseSideThreatName = iif(LogType == "W3C Logs", tostring(EventFields[50]), dynamic(""))
| extend ResponseSideThreatCategoryCode = iif(LogType == "W3C Logs", tostring(EventFields[51]), dynamic(""))
| extend ResponseSideThreatCategory = iif(LogType == "W3C Logs", tostring(EventFields[52]), dynamic(""))
| extend RequestSideDvsThreatName = iif(LogType == "W3C Logs", tostring(EventFields[53]), dynamic(""))
| extend RequestSideDvsScanningVerdict = iif(LogType == "W3C Logs", tostring(EventFields[54]), dynamic(""))
| extend RequestSideDvsVerdictName = iif(LogType == "W3C Logs", tostring(EventFields[55]), dynamic(""))
| extend NetworkBytes = toint(EventFields[63])
};
cisco_wsa_access_logs
| project-away SyslogMessage
             , EventFields
             , ScanningVerdictFields
			 , LogType
