// Title:           Vmware Vcenter
// Author:          Microsoft
// Version:         3.2
// Last Updated:    07/06/2022
// Comment:         version 1.0
//  
// DESCRIPTION:
// This parser takes raw vcenter logs from a custom table (vcenter_CL) and parses the logs into a normalized schema.
//
// USAGE:
// 1. Open Log Analytics/Azure Sentinel Logs blade. Copy the query below and paste into the Logs query window. 
// 2. Click the Save button above the query. A pane will appear on the right, select "as Function" from the drop down. Enter a Function Name.
// 3. It is recommended to name the Function Alias, as vcenter
// 4. Kusto Functions can typically take up to 15 minutes to activate. You can then use Function Alias for other queries.
//
// REFERENCES: 
// Using functions in Azure monitor log queries: https://docs.microsoft.com/azure/azure-monitor/log-query/functions
// 
// LOG SAMPLES:
// This parser assumes the raw log are formatted as follows:
// "2018-04-30 14:14:08 samplehostname1 vcenter-server: User VSPHERE.LOCAL\\Administrator@10.0.0.1 l logged in as JAX-WS RI 2.2.9-b130926.1035 
// svn-revisions#5f6196f2b90e30e065b24"
// 2018-04-30 14:14:08 samplehostname vpxd 2442 - - events [592839] [1-1] [2018-04-30T14:14:08.1432662] [vim.event.UserLogoutSessionEvent] [info] //[VSPHERE.LOCAL\\Administrator] [] [592839] [User VSPHERE.LOCAL\\Administrator>@10.0.0.1 logged out(Login time: Monday, 30 APril, 2018 14:14:07, 
// number of API invocations: 2, user agent: JAX-WS RI 2.2.9-b130926.1035 svn-revision#5f6196f2b90e30e065b24)]
// 2018-04-30 14:14:08 samplehostname vpxd 2442 - - events [592839] [1-1] [2018-04-30T14:14:08.1432662] [vim.event.RoleAddedEvent] [info] [] [] [1111] // [New role <roleName> created]
let AdminDetails = vcenter_CL
| where Message has "logged"
| extend Parser = extract_all(@"^(\S+\s+\S+\s+\S+\s+\S+)\s+(\d+-\d+-\d+T*\s*\d+:\d+:\d+(.\d{3}|.\d+\+\d+:\d+))\s+(\S+)\s(vpxd|vcenter-server:)(\s+(\d+)\s- -\sEvent\s+\[(\d+)\]\s+\[1-1\]\s+\[(\d+-\d+-\d+T\d+:\d+:\d+.\d+Z)\]\s+\[(\S+)\]\s+\[(\w+)\]\s+\[(\S*)]\s+\[(\S*)]\s+\[(\d+)])*\s+\[*((\S*\s*)*)\]*", dynamic([1,2,4,6,7,8,9,10,11,12,13,14,15]),Message)
| extend eventTime = todatetime(Parser[0][1]),
hostname = tostring(Parser[0][2]),
eventid = tostring(Parser[0][4]),
raw_substring = tostring(Parser[0][12])
| project-away Parser;
let AdminLogoutdetails = AdminDetails
| where raw_substring has "logged out"
| extend logoutdetails = extract_all(@"(User\s+(\S+)\s+logged\s+(out|in)\(Login time:\s+(\S+),\s+(\d{2}\s\S+),\s+(\d+)\s+(\d{2}:\d{2}:\d{2}),\s+number of API invocations:\s+(\d+),\s+user agent:\s+((\S*\s*)*)\)\]*)",dynamic([1,2,3,4,5,6,7,8,9]),raw_substring)
| extend LoginTime = strcat(tostring(logoutdetails[0][3]),",",tostring(logoutdetails[0][4]),",",tostring(logoutdetails[0][5]),tostring(logoutdetails[0][6])),
Ipaddress = tostring(split(tostring(logoutdetails[0][1]),"@",1)[0]),
username = tostring(split(tostring(logoutdetails[0][1]),"@",0)[0]),
ApiInvocation = toint(logoutdetails[0][7]),
eventtype = "UserLogoutSessionEvent",
eventid = "592839",
useragent = tostring(logoutdetails[0][8])
| project-away logoutdetails,raw_substring;
let AdminLoginDetails = AdminDetails
| where raw_substring has "logged in"
| extend logindetails = extract_all(@"(User\s+(\S+)\s+logged\s+(out|in))\s+as\s+((\S*\s*)*)",dynamic([1,2,3,4]),raw_substring)
| extend Ipaddress = tostring(split(tostring(logindetails[0][1]),"@",1)[0]),
username = tostring(split(tostring(logindetails[0][1]),"@",0)[0]),
useragent = tostring(logindetails[0][3]),
eventtype = "UserLoginSessionEvent",
eventid = "592838"
| project-away logindetails,raw_substring;
let RoleDetails = vcenter_CL
| where Message has "Role"
| extend Parser = extract_all(@"^(\S+\s+\S+\s+\S+\s+\S+)\s+(\d+-\d+-\d+T*\s*\d+:\d+:\d+(.\d{3}|.\d+\+\d+:\d+))\s+(\S+)\s(vpxd|vcenter-server:)(\s+(\d+)\s- -\sEvent\s+\[(\d+)\]\s+\[1-1\]\s+\[(\d+-\d+-\d+T\d+:\d+:\d+.\d+Z)\]\s+\[(\S+)\]\s+\[(\w+)\]\s+\[(\S*)]\s+\[(\S*)]\s+\[(\d+)])*\s+\[*((\S*\s*)*)\]*", dynamic([1,2,4,6,7,8,9,10,11,12,13,14,15]),Message)
| extend eventTime = todatetime(Parser[0][1]),
hostname = tostring(Parser[0][2]),
raw_substring = tostring(Parser[0][12])
| project-away Parser;
let RoleCreated = RoleDetails
| where raw_substring has ("created")
| extend RoleCreated = tostring(split(tostring(raw_substring)," ",2)[0]),
eventtype = "RoleCreated",
eventid = "580333"
| project-away raw_substring;
let RoleRemoved = RoleDetails
| where Message has ("removed") and Message !has "modified"
| extend RoleRemoved = tostring(split(tostring(raw_substring)," ",2)[0]), //Extract the role. currently it is an array of strings
eventtype = "RoleRemoved",
eventid = "580349"
| project-away raw_substring;
let RoleModified =
RoleDetails
| where raw_substring has ("modified")
| extend RoleModified = extract_all(@"^(Role\s+modified\s*\S*Previous name:\s+(\w+),\s+new\s+name\s+(\w+)\s*\S*Added\s+privileges:\s+(((\w+.\w+\,*)\s*)*)\s*\S*Removed\s+privileges:\s+(((\w+.\w+\,*)\s*)*))", dynamic([2,3,4,7]),raw_substring)
| extend eventtype = "RoleModified",
oldrolename = tostring(RoleModified[0][0]),
newrolename = tostring(RoleModified[0][1]),
addedPrivilege = split(tostring(RoleModified[0][2]),", "),
removedPrivilege = split(tostring(RoleModified[0][3]),", "),
eventid = "580348"
| project-away raw_substring;
union AdminLogoutdetails,AdminLoginDetails,RoleRemoved,RoleCreated,RoleModified