{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "metadata": {
        "title": "Tanium-SecurityPatches",
        "description": "This playbook starts with a Microsoft Sentinel incident, gets the hosts associated with that incident, queries the Tanium API Gateway for applicable security patches for those endpoints, and then adds a comment to the incident with that information.",
        "prerequisites": [
            "1. Microsoft Sentinel incidents with associated hosts.",
            "2. A [Tanium API Token](https://docs.tanium.com/platform_user/platform_user/console_api_tokens.html) granting access to your Tanium environment: the query will be made with the user priviledges of that token.",
            "3. A hostname for your Tanium environment reachable from Logic Apps.",
            "4. Tanium Patch installed and operational in your Tanium environment."
        ],
        "postDeploymentSteps": [
            "1. Ensure the Logic App API connection to Microsoft Sentinel is authenticated."
        ],
        "entities": [ "host" ],
        "tags": ["Enrichment"],
        "lastUpdateTime": "2022-11-18T00:00:00.000Z",
        "support": {
            "tier": "developer",
            "link": "https://www.tanium.com"
        },
        "author": {
            "name": "Tanium"
        }
    },
    "parameters": {
        "PlaybookName": {
            "defaultValue": "Tanium-SecurityPatches",
            "type": "string"
        },
        "TaniumApiToken": {
            "defaultValue": "",
            "type": "securestring",
            "metadata": {
                "description": "The Tanium API Token used for this logic app. The logic app will be restricted to the level of access available to the user who generated the token."
            }
        },
        "TaniumServerHostname": {
            "defaultValue": "hostname",
            "type": "String",
            "metadata": {
                "description": "The hostname for your Tanium server e.g. tanium.example.com"
            }
        }
    },
    "variables": {
        "AzureSentinelConnectionName": "[concat('azuresentinel-', parameters('PlaybookName'))]",
        "TaniumApiGatewayApi": "[uri(concat('https://',parameters('TaniumServerHostname')),'/plugin/products/gateway/graphql')]"
    },
    "resources": [
        {
          "type": "Microsoft.Web/connections",
          "apiVersion": "2018-07-01-preview",
          "name": "[variables('AzureSentinelConnectionName')]",
          "location": "[resourceGroup().location]",
          "properties": {
              "displayName": "[variables('AzureSentinelConnectionName')]",
              "customParameterValues": {},
              "api": {
                  "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuresentinel')]"
              }
          }
        },
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2019-05-01",
            "name": "[parameters('PlaybookName')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]"
            ],
            "properties": {
                "state": "Enabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        },
                        "TaniumApiToken": {
                            "type": "securestring",
                            "metadata": {
                                "description": "The Tanium API Token provides access to the Tanium Server. Access is restricted to the level of access available to the user who generated the token."
                            }
                        },
                        "TaniumApiGatewayApi": {
                            "type": "String"
                        }
                    },
                    "triggers": {
                        "Microsoft_Sentinel_incident": {
                            "type": "ApiConnectionWebhook",
                            "inputs": {
                                "body": {
                                    "callback_url": "@{listCallbackUrl()}"
                                },
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                },
                                "path": "/incident-creation"
                            }
                        }
                    },
                    "actions": {
                        "Check_for_successful_results": {
                            "actions": {},
                            "runAfter": {
                                "Initialize_API_Gateway_refresh_cursor": [
                                    "Succeeded"
                                ]
                            },
                            "else": {
                                "actions": {
                                    "Until_endpoint_data_is_refreshed": {
                                        "actions": {
                                            "Refresh_API_Gateway_query": {
                                                "runAfter": {
                                                    "Update_refresh_cursor_in_query_variables": [
                                                        "Succeeded"
                                                    ]
                                                },
                                                "type": "Http",
                                                "inputs": {
                                                    "body": {
                                                        "query": "@variables('api gateway query')",
                                                        "variables": "@variables('api gateway query variables')"
                                                    },
                                                    "headers": {
                                                        "Content-Type": "application/json",
                                                        "session": "@parameters('TaniumApiToken')"
                                                    },
                                                    "method": "POST",
                                                    "uri": "@parameters('TaniumApiGatewayApi')"
                                                },
                                                "runtimeConfiguration": {
                                                    "secureData": {
                                                        "properties": [
                                                            "inputs"
                                                        ]
                                                    }
                                                }
                                            },
                                            "Set_api_gateway_response_to_refreshed_response": {
                                                "runAfter": {
                                                    "Set_refresh_cursor": [
                                                        "Succeeded"
                                                    ]
                                                },
                                                "type": "SetVariable",
                                                "inputs": {
                                                    "name": "API Gateway Response",
                                                    "value": "@body('Refresh_API_Gateway_query')"
                                                }
                                            },
                                            "Set_refresh_cursor": {
                                                "runAfter": {
                                                    "Refresh_API_Gateway_query": [
                                                        "Succeeded"
                                                    ]
                                                },
                                                "type": "SetVariable",
                                                "inputs": {
                                                    "name": "api gateway refresh cursor",
                                                    "value": "@{body('Refresh_API_Gateway_query')?['data']?['endpoints']?['collectionInfo']?['startCursor']}"
                                                }
                                            },
                                            "Update_refresh_cursor_in_query_variables": {
                                                "runAfter": {},
                                                "type": "SetVariable",
                                                "inputs": {
                                                    "name": "api gateway query variables",
                                                    "value": "{\n  \"source\": @{variables('tanium endpoint source')},\n  \"refreshCursor\": \"@{variables('api gateway refresh cursor')}\"\n}"
                                                }
                                            }
                                        },
                                        "runAfter": {},
                                        "expression": "@greater(length(body('Refresh_API_Gateway_query')?['data']?['endpoints']?['edges']), 0)",
                                        "limit": {
                                            "count": 60,
                                            "timeout": "PT10M"
                                        },
                                        "type": "Until"
                                    }
                                }
                            },
                            "expression": {
                                "and": [
                                    {
                                        "greater": [
                                            "@length(body('Query_API_Gateway')?['data']?['endpoints']?['edges'])",
                                            0
                                        ]
                                    },
                                    {
                                        "equals": [
                                            "@body('Query_API_Gateway')?['data']?['endpoints']?['collectionInfo']?['success']",
                                            "@true"
                                        ]
                                    }
                                ]
                            },
                            "type": "If",
                            "description": "If we don't then we'll use the refresh cursor until we have endpoint data."
                        },
                        "Entities_-_Get_Hosts": {
                            "runAfter": {},
                            "type": "ApiConnection",
                            "inputs": {
                                "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/entities/host"
                            }
                        },
                        "Exit_early_if_no_hosts_are_found": {
                            "actions": {
                                "Add_no_hosts_comment_to_incident_(V3)": {
                                    "runAfter": {},
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "body": {
                                            "incidentArmId": "@triggerBody()?['object']?['id']",
                                            "message": "<p>No hosts found for this incident.</p>"
                                        },
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "/Incidents/Comment"
                                    }
                                },
                                "Terminate": {
                                    "runAfter": {
                                        "Add_no_hosts_comment_to_incident_(V3)": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Terminate",
                                    "inputs": {
                                        "runStatus": "Succeeded"
                                    }
                                }
                            },
                            "runAfter": {
                                "Entities_-_Get_Hosts": [
                                    "Succeeded"
                                ]
                            },
                            "expression": {
                                "and": [
                                    {
                                        "less": [
                                            "@length(body('Entities_-_Get_Hosts')?['Hosts'])",
                                            1
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "For_each_endpoint": {
                            "foreach": "@variables('endpoints')",
                            "actions": {
                                "Comment_available_security_patches_to_incident_(V3)": {
                                    "runAfter": {
                                        "Create_HTML_table_of_available_security_patches": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "body": {
                                            "incidentArmId": "@triggerBody()?['object']?['id']",
                                            "message": "<p>Available security patches for @{body('Parse_endpoint_JSON')?['name']}<br>\n<br>\n@{body('Create_HTML_table_of_available_security_patches')}</p>"
                                        },
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "/Incidents/Comment"
                                    }
                                },
                                "Create_HTML_table_of_available_security_patches": {
                                    "runAfter": {
                                        "For_each_not_installed_patch": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Table",
                                    "inputs": {
                                        "format": "HTML",
                                        "from": "@variables('results')"
                                    }
                                },
                                "For_each_not_installed_patch": {
                                    "foreach": "@variables('not installed row indexes')",
                                    "actions": {
                                        "if_security_update": {
                                            "actions": {
                                                "Append_to_results": {
                                                    "runAfter": {},
                                                    "type": "AppendToArrayVariable",
                                                    "inputs": {
                                                        "name": "results",
                                                        "value": {
                                                            "Available Security Patches": "@variables('patch titles')[items('For_each_not_installed_patch')]"
                                                        }
                                                    }
                                                }
                                            },
                                            "runAfter": {},
                                            "expression": {
                                                "or": [
                                                    {
                                                        "equals": [
                                                            "@variables('classifications')[items('For_each_not_installed_patch')]",
                                                            "Security Updates"
                                                        ]
                                                    },
                                                    {
                                                        "equals": [
                                                            "@variables('classifications')[items('For_each_not_installed_patch')]",
                                                            "security"
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type": "If"
                                        }
                                    },
                                    "runAfter": {
                                        "For_each_sensor_reading_column": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Foreach"
                                },
                                "For_each_sensor_reading_column": {
                                    "foreach": "@body('Parse_endpoint_JSON')?['sensorReadings']?['columns']",
                                    "actions": {
                                        "if_column_is_from_patch_list_applicability": {
                                            "actions": {
                                                "Switch_on_sensor_column": {
                                                    "runAfter": {},
                                                    "cases": {
                                                        "Case_Classification": {
                                                            "case": "Classification",
                                                            "actions": {
                                                                "Set_classifications": {
                                                                    "runAfter": {},
                                                                    "type": "SetVariable",
                                                                    "inputs": {
                                                                        "name": "classifications",
                                                                        "value": "@items('For_each_sensor_reading_column')?['values']"
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "Case_Install_Status": {
                                                            "case": "Install Status",
                                                            "actions": {
                                                                "For_each_install_status_row": {
                                                                    "foreach": "@items('For_each_sensor_reading_column')?['values']",
                                                                    "actions": {
                                                                        "If_install_status_is_Not_Installed": {
                                                                            "actions": {
                                                                                "Append_to_not_installed_column_indexes": {
                                                                                    "runAfter": {},
                                                                                    "type": "AppendToArrayVariable",
                                                                                    "inputs": {
                                                                                        "name": "not installed row indexes",
                                                                                        "value": "@variables('column index')"
                                                                                    }
                                                                                }
                                                                            },
                                                                            "runAfter": {},
                                                                            "expression": {
                                                                                "and": [
                                                                                    {
                                                                                        "equals": [
                                                                                            "@items('For_each_install_status_row')",
                                                                                            "Not Installed"
                                                                                        ]
                                                                                    }
                                                                                ]
                                                                            },
                                                                            "type": "If"
                                                                        },
                                                                        "Increment_column_index": {
                                                                            "runAfter": {
                                                                                "If_install_status_is_Not_Installed": [
                                                                                    "Succeeded"
                                                                                ]
                                                                            },
                                                                            "type": "IncrementVariable",
                                                                            "inputs": {
                                                                                "name": "column index",
                                                                                "value": 1
                                                                            }
                                                                        }
                                                                    },
                                                                    "runAfter": {},
                                                                    "type": "Foreach"
                                                                }
                                                            }
                                                        },
                                                        "Case_Tanium_UID": {
                                                            "case": "Tanium UID",
                                                            "actions": {
                                                                "Set_tanium_patch_ids": {
                                                                    "runAfter": {},
                                                                    "type": "SetVariable",
                                                                    "inputs": {
                                                                        "name": "tanium patch ids",
                                                                        "value": "@items('For_each_sensor_reading_column')?['values']"
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "Case_Title": {
                                                            "case": "Title",
                                                            "actions": {
                                                                "Set_patch_titles": {
                                                                    "runAfter": {},
                                                                    "type": "SetVariable",
                                                                    "inputs": {
                                                                        "name": "patch titles",
                                                                        "value": "@items('For_each_sensor_reading_column')?['values']"
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    },
                                                    "default": {
                                                        "actions": {}
                                                    },
                                                    "expression": "@items('For_each_sensor_reading_column')?['name']",
                                                    "type": "Switch"
                                                }
                                            },
                                            "runAfter": {},
                                            "expression": {
                                                "and": [
                                                    {
                                                        "equals": [
                                                            "@items('For_each_sensor_reading_column')?['sensor']?['name']",
                                                            "Patch - Patch List Applicability"
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type": "If"
                                        }
                                    },
                                    "runAfter": {
                                        "Parse_endpoint_JSON": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Foreach"
                                },
                                "Parse_endpoint_JSON": {
                                    "runAfter": {
                                        "Set_not_installed_row_indexes_to_empty_list": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ParseJson",
                                    "inputs": {
                                        "content": "@variables('endpoint')",
                                        "schema": {
                                            "properties": {
                                                "ipAddress": {
                                                    "type": "string"
                                                },
                                                "name": {
                                                    "type": "string"
                                                },
                                                "os": {
                                                    "properties": {
                                                        "platform": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "sensorReadings": {
                                                    "properties": {
                                                        "columns": {
                                                            "items": {
                                                                "properties": {
                                                                    "name": {
                                                                        "type": "string"
                                                                    },
                                                                    "sensor": {
                                                                        "properties": {
                                                                            "name": {
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "values": {
                                                                        "items": {
                                                                            "type": "string"
                                                                        },
                                                                        "type": "array"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "sensor",
                                                                    "name",
                                                                    "values"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    }
                                },
                                "Set_column_index_to_0": {
                                    "runAfter": {
                                        "Set_endpoint": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "column index",
                                        "value": 0
                                    }
                                },
                                "Set_endpoint": {
                                    "runAfter": {},
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "endpoint",
                                        "value": "@items('For_each_endpoint')?['node']"
                                    }
                                },
                                "Set_not_installed_row_indexes_to_empty_list": {
                                    "runAfter": {
                                        "Set_column_index_to_0": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "not installed row indexes",
                                        "value": []
                                    }
                                }
                            },
                            "runAfter": {
                                "Initialize_result_row_indexes": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach"
                        },
                        "For_each_incident_host": {
                            "foreach": "@body('Entities_-_Get_Hosts')?['Hosts']",
                            "actions": {
                                "If_ip_address": {
                                    "actions": {
                                        "Append_to_endpoint_filters": {
                                            "runAfter": {
                                                "Compose_endpoint_filter_for_host_and_ip_address": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "AppendToArrayVariable",
                                            "inputs": {
                                                "name": "endpoint filters",
                                                "value": "@outputs('Compose_endpoint_filter_for_host_and_ip_address')"
                                            }
                                        },
                                        "Compose_endpoint_filter_for_host_and_ip_address": {
                                            "runAfter": {},
                                            "type": "Compose",
                                            "inputs": {
                                                "filters": [
                                                    {
                                                        "op": "CONTAINS",
                                                        "path": "ipAddress",
                                                        "value": "@{body('Parse_host_json')?['additionalData']?['LastIpAddress']}"
                                                    },
                                                    {
                                                        "path": "name",
                                                        "value": "@{body('Parse_host_json')?['hostName']}"
                                                    }
                                                ]
                                            }
                                        }
                                    },
                                    "runAfter": {
                                        "Parse_host_json": [
                                            "Succeeded"
                                        ]
                                    },
                                    "else": {
                                        "actions": {
                                            "Append_host_only_to_endpoint_filters": {
                                                "runAfter": {
                                                    "Compose_endpoint_filter_for_host_only": [
                                                        "Succeeded"
                                                    ]
                                                },
                                                "type": "AppendToArrayVariable",
                                                "inputs": {
                                                    "name": "endpoint filters",
                                                    "value": "@outputs('Compose_endpoint_filter_for_host_only')"
                                                }
                                            },
                                            "Compose_endpoint_filter_for_host_only": {
                                                "runAfter": {},
                                                "type": "Compose",
                                                "inputs": {
                                                    "filters": [
                                                        {
                                                            "path": "name",
                                                            "value": "@{body('Parse_host_json')?['hostName']}"
                                                        },
                                                        {
                                                            "sensor": {
                                                                "column": "Install Status",
                                                                "name": "Patch - Patch List Applicability",
                                                                "params": [
                                                                    {
                                                                        "name": "bin",
                                                                        "value": "0"
                                                                    },
                                                                    {
                                                                        "name": "binCount",
                                                                        "value": "1"
                                                                    }
                                                                ]
                                                            },
                                                            "value": "Not Installed"
                                                        }
                                                    ]
                                                }
                                            }
                                        }
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "not": {
                                                    "equals": [
                                                        "@body('Parse_host_json')?['additionalData']?['LastIpAddress']",
                                                        "@null"
                                                    ]
                                                }
                                            }
                                        ]
                                    },
                                    "type": "If"
                                },
                                "Parse_host_json": {
                                    "runAfter": {},
                                    "type": "ParseJson",
                                    "inputs": {
                                        "content": "@items('For_each_incident_host')",
                                        "schema": {
                                            "properties": {
                                                "Type": {
                                                    "type": "string"
                                                },
                                                "additionalData": {
                                                    "properties": {
                                                        "AvStatus": {
                                                            "type": "string"
                                                        },
                                                        "FQDN": {
                                                            "type": "string"
                                                        },
                                                        "HealthStatus": {
                                                            "type": "string"
                                                        },
                                                        "LastExternalIpAddress": {
                                                            "type": "string"
                                                        },
                                                        "LastIpAddress": {
                                                            "type": "string"
                                                        },
                                                        "LastSeen": {
                                                            "type": "string"
                                                        },
                                                        "LoggedOnUsers": {
                                                            "type": "string"
                                                        },
                                                        "MdatpDeviceId": {
                                                            "type": "string"
                                                        },
                                                        "OnboardingStatus": {
                                                            "type": "string"
                                                        },
                                                        "RiskScore": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "friendlyName": {
                                                    "type": "string"
                                                },
                                                "hostName": {
                                                    "type": "string"
                                                },
                                                "osFamily": {
                                                    "type": "string"
                                                },
                                                "osVersion": {
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    }
                                }
                            },
                            "runAfter": {
                                "Initialize_Endpoint_Filters_array": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach"
                        },
                        "Initialize_API_Gateway_Query": {
                            "runAfter": {
                                "Exit_early_if_no_hosts_are_found": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "api gateway query",
                                        "type": "string",
                                        "value": "query ($endpointsFilter: EndpointFieldFilter, $endCursor: Cursor, $source: EndpointSource, $refreshCursor: Cursor) {\n  endpoints(source: $source, first: 10, after: $endCursor, filter: $endpointsFilter, refresh: $refreshCursor) {\n    edges {\n      node {\n        name\n        ipAddress\n        os { platform }\n        sensorReadings(\n          sensors: [\n            {\n              name: \"Patch - Patch List Applicability\",\n              params: [{name: \"bin\", value: \"0\"}, {name: \"binCount\", value: \"1\"}],\n            \t\n            }\n          ]\n        ) {\n          columns {\n            sensor {\n              name\n            }\n            name\n            values\n          }\n        }\n      }\n    }\n    collectionInfo {\n      startCursor\n      success\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}"
                                    }
                                ]
                            },
                            "description": "To check this query against a Tanium Server question use this in the query variables: {\"source\":{\"ts\":{\"stableWaitTime\":10}}}"
                        },
                        "Initialize_API_Gateway_Query_Variables": {
                            "runAfter": {
                                "Initialize_Tanium_Endpoint_Source_to_TS": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "api gateway query variables",
                                        "type": "string",
                                        "value": "{\n  \"source\": @{variables('Tanium Endpoint Source')},\n  \"endpointsFilter\": {\n    \"any\": true,\n    \"filters\": @{variables('endpoint filters')}\n  }\n}"
                                    }
                                ]
                            }
                        },
                        "Initialize_API_Gateway_Response": {
                            "runAfter": {
                                "Until_some_endpoint_data_is_returned": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "API Gateway Response",
                                        "type": "object",
                                        "value": "@body('Query_API_Gateway')"
                                    }
                                ]
                            }
                        },
                        "Initialize_API_Gateway_query_cursor": {
                            "runAfter": {
                                "Parse_API_Gateway_response": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "cursor",
                                        "type": "string",
                                        "value": "@body('Parse_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['endCursor']"
                                    }
                                ]
                            }
                        },
                        "Initialize_API_Gateway_refresh_cursor": {
                            "runAfter": {
                                "Initialize_API_Gateway_Response": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "api gateway refresh cursor",
                                        "type": "string",
                                        "value": "@{body('Query_API_Gateway')?['data']?['endpoints']?['collectionInfo']?['startCursor']}"
                                    }
                                ]
                            }
                        },
                        "Initialize_Endpoint_Filters_array": {
                            "runAfter": {
                                "Initialize_API_Gateway_Query": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "endpoint filters",
                                        "type": "array"
                                    }
                                ]
                            }
                        },
                        "Initialize_Tanium_Endpoint_Source_to_TS": {
                            "runAfter": {
                                "For_each_incident_host": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "tanium endpoint source",
                                        "type": "object",
                                        "value": {
                                            "ts": {
                                                "stableWaitTime": 30
                                            }
                                        }
                                    }
                                ]
                            }
                        },
                        "Initialize_classifications": {
                            "runAfter": {
                                "Initialize_patch_titles": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "classifications",
                                        "type": "array"
                                    }
                                ]
                            }
                        },
                        "Initialize_column_index": {
                            "runAfter": {
                                "Initialize_results": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "column index",
                                        "type": "integer",
                                        "value": 0
                                    }
                                ]
                            }
                        },
                        "Initialize_endpoint": {
                            "runAfter": {
                                "Paginate_API_Gateway_query_if_needed": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "endpoint",
                                        "type": "object"
                                    }
                                ]
                            }
                        },
                        "Initialize_endpoints_array": {
                            "runAfter": {
                                "Initialize_API_Gateway_query_cursor": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "endpoints",
                                        "type": "array",
                                        "value": "@body('Parse_API_Gateway_response')?['data']?['endpoints']?['edges']"
                                    }
                                ]
                            }
                        },
                        "Initialize_not_installed_row_indexes": {
                            "runAfter": {
                                "Initialize_column_index": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "not installed row indexes",
                                        "type": "array"
                                    }
                                ]
                            }
                        },
                        "Initialize_patch_titles": {
                            "runAfter": {
                                "Initialize_not_installed_row_indexes": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "patch titles",
                                        "type": "array"
                                    }
                                ]
                            }
                        },
                        "Initialize_result_row_indexes": {
                            "runAfter": {
                                "Initialize_tanium_patch_ids": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "result row indexes",
                                        "type": "array",
                                        "value": []
                                    }
                                ]
                            }
                        },
                        "Initialize_results": {
                            "runAfter": {
                                "Initialize_endpoint": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "results",
                                        "type": "array"
                                    }
                                ]
                            }
                        },
                        "Initialize_tanium_patch_ids": {
                            "runAfter": {
                                "Initialize_classifications": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "tanium patch ids",
                                        "type": "array"
                                    }
                                ]
                            }
                        },
                        "Paginate_API_Gateway_query_if_needed": {
                            "actions": {
                                "Until_there_are_no_more_pages": {
                                    "actions": {
                                        "For_each_endpoint_in_paginated_API_Gateway_response": {
                                            "foreach": "@body('Parse_paginated_API_Gateway_response')?['data']?['endpoints']?['edges']",
                                            "actions": {
                                                "Append_endpoint_to_endpoints": {
                                                    "runAfter": {},
                                                    "type": "AppendToArrayVariable",
                                                    "inputs": {
                                                        "name": "endpoints",
                                                        "value": "@items('For_each_endpoint_in_paginated_API_Gateway_response')"
                                                    }
                                                }
                                            },
                                            "runAfter": {
                                                "Update_API_Gateway_query_cursor": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Foreach",
                                            "runtimeConfiguration": {
                                                "concurrency": {
                                                    "repetitions": 1
                                                }
                                            }
                                        },
                                        "Paginate_API_Gateway": {
                                            "runAfter": {
                                                "Update_API_Gateway_query_variables": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Http",
                                            "inputs": {
                                                "body": {
                                                    "query": "@variables('api gateway query')",
                                                    "variables": "@variables('api gateway query variables')"
                                                },
                                                "headers": {
                                                    "Content-Type": "application/json",
                                                    "session": "@parameters('TaniumApiToken')"
                                                },
                                                "method": "POST",
                                                "uri": "@parameters('TaniumApiGatewayApi')"
                                            },
                                            "runtimeConfiguration": {
                                                "secureData": {
                                                    "properties": [
                                                        "inputs"
                                                    ]
                                                }
                                            }
                                        },
                                        "Parse_paginated_API_Gateway_response": {
                                            "runAfter": {
                                                "Paginate_API_Gateway": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "ParseJson",
                                            "inputs": {
                                                "content": "@body('Paginate_API_Gateway')",
                                                "schema": {
                                                    "properties": {
                                                        "data": {
                                                            "properties": {
                                                                "endpoints": {
                                                                    "properties": {
                                                                        "edges": {
                                                                            "items": {
                                                                                "properties": {
                                                                                    "node": {
                                                                                        "type": "object"
                                                                                    }
                                                                                },
                                                                                "required": [
                                                                                    "node"
                                                                                ],
                                                                                "type": "object"
                                                                            },
                                                                            "type": "array"
                                                                        },
                                                                        "pageInfo": {
                                                                            "properties": {
                                                                                "endCursor": {
                                                                                    "type": "string"
                                                                                },
                                                                                "hasNextPage": {
                                                                                    "type": "boolean"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            }
                                        },
                                        "Update_API_Gateway_query_cursor": {
                                            "runAfter": {
                                                "Parse_paginated_API_Gateway_response": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "cursor",
                                                "value": "@body('Parse_paginated_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['endCursor']"
                                            }
                                        },
                                        "Update_API_Gateway_query_variables": {
                                            "runAfter": {},
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "api gateway query variables",
                                                "value": "{\n  \"source\": @{variables('tanium endpoint source')},\n  \"endCursor\": \"@{variables('cursor')}\"\n}"
                                            }
                                        }
                                    },
                                    "runAfter": {},
                                    "expression": "@equals(body('Parse_paginated_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['hasNextPage'], false)",
                                    "limit": {
                                        "count": 60,
                                        "timeout": "PT1H"
                                    },
                                    "type": "Until"
                                }
                            },
                            "runAfter": {
                                "Initialize_endpoints_array": [
                                    "Succeeded"
                                ]
                            },
                            "expression": {
                                "and": [
                                    {
                                        "equals": [
                                            "@body('Parse_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['hasNextPage']",
                                            "@true"
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Parse_API_Gateway_response": {
                            "runAfter": {
                                "Check_for_successful_results": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ParseJson",
                            "inputs": {
                                "content": "@variables('API Gateway Response')",
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "properties": {
                                                "endpoints": {
                                                    "properties": {
                                                        "edges": {
                                                            "items": {
                                                                "properties": {
                                                                    "node": {
                                                                        "properties": {
                                                                            "ipAddress": {
                                                                                "type": "string"
                                                                            },
                                                                            "name": {
                                                                                "type": "string"
                                                                            },
                                                                            "os": {
                                                                                "properties": {
                                                                                    "platform": {
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "sensorReadings": {
                                                                                "properties": {
                                                                                    "columns": {
                                                                                        "items": {
                                                                                            "properties": {
                                                                                                "name": {
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "sensor": {
                                                                                                    "properties": {
                                                                                                        "name": {
                                                                                                            "type": "string"
                                                                                                        }
                                                                                                    },
                                                                                                    "type": "object"
                                                                                                },
                                                                                                "values": {
                                                                                                    "items": {
                                                                                                        "type": "string"
                                                                                                    },
                                                                                                    "type": "array"
                                                                                                }
                                                                                            },
                                                                                            "required": [
                                                                                                "sensor",
                                                                                                "name",
                                                                                                "values"
                                                                                            ],
                                                                                            "type": "object"
                                                                                        },
                                                                                        "type": "array"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "node"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "pageInfo": {
                                                            "properties": {
                                                                "endCursor": {
                                                                    "type": "string"
                                                                },
                                                                "hasNextPage": {
                                                                    "type": "boolean"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        },
                        "Until_some_endpoint_data_is_returned": {
                            "actions": {
                                "Query_API_Gateway": {
                                    "runAfter": {},
                                    "type": "Http",
                                    "inputs": {
                                        "body": {
                                            "query": "@variables('api gateway query')",
                                            "variables": "@variables('api gateway query variables')"
                                        },
                                        "headers": {
                                            "Content-Type": "application/json",
                                            "session": "@parameters('TaniumApiToken')"
                                        },
                                        "method": "POST",
                                        "uri": "@parameters('TaniumApiGatewayApi')"
                                    },
                                    "runtimeConfiguration": {
                                        "secureData": {
                                            "properties": [
                                                "inputs"
                                            ]
                                        }
                                    }
                                }
                            },
                            "runAfter": {
                                "Initialize_API_Gateway_Query_Variables": [
                                    "Succeeded"
                                ]
                            },
                            "expression": "@not(equals(body('Query_API_Gateway')?['data']?['endpoints'], null))",
                            "limit": {
                                "count": 60,
                                "timeout": "PT1H"
                            },
                            "type": "Until"
                        }
                    },
                    "outputs": {}
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "azuresentinel": {
                                "connectionName": "[variables('AzureSentinelConnectionName')]",
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]",
                                "id": "[concat('/subscriptions/',subscription().subscriptionId, '/providers/Microsoft.Web/locations/',resourceGroup().location,'/managedApis/azuresentinel')]"
                            }
                        }
                    },
                    "TaniumApiToken": {
                        "value": "[parameters('TaniumApiToken')]"
                    },
                    "TaniumApiGatewayApi": {
                        "value": "[variables('TaniumApiGatewayApi')]"
                    }
                }
            }
        }
    ]
}
