{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "tabs",
        "links": [
          {
            "id": "885a9b5d-b2d6-4316-a6f9-6f65941b55b8",
            "cellValue": "selectedTab",
            "linkTarget": "parameter",
            "linkLabel": "Threat Response",
            "subTarget": "Threat Response",
            "style": "link"
          },
          {
            "id": "786ffe19-a17d-4ca9-9355-f97406ae048f",
            "cellValue": "selectedTab",
            "linkTarget": "parameter",
            "linkLabel": "Comply",
            "subTarget": "Comply",
            "preText": "Comply",
            "style": "link"
          },
          {
            "id": "efd238ee-2305-4384-a38c-a96d850ab4c9",
            "cellValue": "selectedTab",
            "linkTarget": "parameter",
            "linkLabel": "Discover",
            "subTarget": "Discover",
            "style": "link"
          },
          {
            "id": "a34745a8-6073-484d-adc5-d5c8e7fb9209",
            "cellValue": "selectedTab",
            "linkTarget": "parameter",
            "linkLabel": "Microsoft Tooling Health",
            "subTarget": "Microsoft Tooling Health",
            "style": "link"
          },
          {
            "id": "32a1a85f-978f-4b42-b27f-41cfb90e4e14",
            "cellValue": "selectedTab",
            "linkTarget": "parameter",
            "linkLabel": "Patch",
            "subTarget": "Patch",
            "style": "link"
          }
        ]
      },
      "name": "horizontal tabs"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "## Top 10 mission critical computers with CVSS hits >= 9.0\n#### Based on CVE v3"
            },
            "name": "visualization title"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let lastRunTime = toscalar(\n    TaniumComplyVulnerabilities_CL\n    | extend roundedTime = bin(TimeGenerated, 1m) \n    | distinct roundedTime    \n    | order by roundedTime desc     \n    | limit 1);\n\nTaniumComplyVulnerabilities_CL \n| where Scan_Type_s != 'container registries'\n    and TimeGenerated >= lastRunTime\n    and CVSS_v3_Score_d >=9.0\n| summarize count() by Computer_Name_s \n| limit 10\n| sort by count_",
              "size": 4,
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "tiles",
              "tileSettings": {
                "showBorder": false,
                "titleContent": {
                  "columnMatch": "Computer_Name_s",
                  "formatter": 1
                },
                "leftContent": {
                  "columnMatch": "count_",
                  "formatter": 12,
                  "formatOptions": {
                    "palette": "auto"
                  },
                  "numberFormat": {
                    "unit": 17,
                    "options": {
                      "maximumSignificantDigits": 3,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              },
              "graphSettings": {
                "type": 0,
                "topContent": {
                  "columnMatch": "Computer_Name_s",
                  "formatter": 1
                },
                "centerContent": {
                  "columnMatch": "count_",
                  "formatter": 1,
                  "numberFormat": {
                    "unit": 17,
                    "options": {
                      "maximumSignificantDigits": 3,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              },
              "mapSettings": {
                "locInfo": "LatLong",
                "sizeSettings": "count_",
                "sizeAggregation": "Sum",
                "legendMetric": "count_",
                "legendAggregation": "Sum",
                "itemColorSettings": {
                  "type": "heatmap",
                  "colorAggregation": "Sum",
                  "nodeColorField": "count_",
                  "heatmapPalette": "greenRed"
                }
              }
            },
            "name": "query - 2"
          },
          {
            "type": 1,
            "content": {
              "json": "## Operating Systems with CVSS hits >= 9.0 by CVSS Count\n#### Based on CVE v3"
            },
            "name": "visualization title"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let lastRunTime = toscalar(\n    TaniumComplyVulnerabilities_CL\n    | extend roundedTime = bin(TimeGenerated, 1m) \n    | distinct roundedTime    \n    | order by roundedTime desc     \n    | limit 1);\n\nTaniumComplyVulnerabilities_CL \n| where TimeGenerated >= lastRunTime\n    and CVSS_v3_Score_d >=9.0 \n| summarize count() by Operating_System_Generation_s\n| sort by count_",
              "size": 4,
              "timeContext": {
                "durationMs": 2592000000
              },
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "piechart",
              "tileSettings": {
                "titleContent": {
                  "columnMatch": "Operating_System_Generation_s",
                  "formatter": 1
                },
                "leftContent": {
                  "columnMatch": "count_",
                  "formatter": 12,
                  "formatOptions": {
                    "palette": "auto"
                  },
                  "numberFormat": {
                    "unit": 17,
                    "options": {
                      "maximumSignificantDigits": 3,
                      "maximumFractionDigits": 2
                    }
                  }
                },
                "showBorder": false
              }
            },
            "name": "query - 3"
          },
          {
            "type": 1,
            "content": {
              "json": "## Vulnerability Distribution by Year"
            },
            "name": "visualization title"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let getCveYear = (s:string) { substring(s, 4, 4) };\nlet checkCveYearExists = (s:string) { iff(s startswith 'CVE-', getCveYear(s), 'Not Specified') };\nlet extractCveYear = (year:string,cve:string) { iff(year != '', year, checkCveYearExists(cve)) };\n\nlet lastRunTime = toscalar(\n    TaniumComplyVulnerabilities_CL\n    | extend roundedTime = bin(TimeGenerated, 1m) \n    | distinct roundedTime    \n    | order by roundedTime desc     \n    | limit 1);\n    \nlet Vulnerabilities = \nTaniumComplyVulnerabilities_CL\n|where TimeGenerated >= lastRunTime\n|extend ParsedCveYear = extractCveYear(CVE_Year_s, CVE_s);\n\nVulnerabilities\n|distinct ParsedCveYear,Computer_Name_s, CVE_s\n|summarize count() by ParsedCveYear\n|sort by ParsedCveYear asc",
              "size": 0,
              "timeContext": {
                "durationMs": 2592000000
              },
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "barchart"
            },
            "name": "query - 3"
          },
          {
            "type": 1,
            "content": {
              "json": "## Vulnerability Distribution by OS"
            },
            "name": "visualization title"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let lastRunTime = toscalar(\n    TaniumComplyVulnerabilities_CL\n    | extend roundedTime = bin(TimeGenerated, 1m) \n    | distinct roundedTime    \n    | order by roundedTime desc     \n    | limit 1);\n    \n    \nTaniumComplyVulnerabilities_CL\n|where TimeGenerated >= lastRunTime\n    and Scan_Type_s != 'container registries'\n|distinct CVE_s, Computer_Name_s, Operating_System_Generation_s\n|summarize count() by Operating_System_Generation_s",
              "size": 0,
              "timeContext": {
                "durationMs": 2592000000
              },
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "barchart"
            },
            "name": "query - 4"
          },
          {
            "type": 1,
            "content": {
              "json": "## Vulnerability Distribution by Severity\n#### Based on CVE v3"
            },
            "name": "visualization title"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let lastRunTime = toscalar(\n    TaniumComplyVulnerabilities_CL\n    | extend roundedTime = bin(TimeGenerated, 1m) \n    | distinct roundedTime    \n    | order by roundedTime desc     \n    | limit 1);\n    \nTaniumComplyVulnerabilities_CL\n|where TimeGenerated >= lastRunTime\n|distinct CVE_s,CVSS_v3_Severity_s\n|summarize count() by CVSS_v3_Severity_s\n",
              "size": 0,
              "timeContext": {
                "durationMs": 2592000000
              },
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "piechart",
              "tileSettings": {
                "showBorder": false,
                "titleContent": {
                  "columnMatch": "CVSS_v3_Severity_s",
                  "formatter": 1
                },
                "leftContent": {
                  "columnMatch": "count_",
                  "formatter": 12,
                  "formatOptions": {
                    "palette": "auto"
                  },
                  "numberFormat": {
                    "unit": 17,
                    "options": {
                      "maximumSignificantDigits": 3,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              },
              "graphSettings": {
                "type": 2,
                "topContent": {
                  "columnMatch": "CVSS_v3_Severity_s",
                  "formatter": 1
                },
                "centerContent": {
                  "columnMatch": "count_",
                  "formatter": 1,
                  "numberFormat": {
                    "unit": 17,
                    "options": {
                      "maximumSignificantDigits": 3,
                      "maximumFractionDigits": 2
                    }
                  }
                },
                "nodeIdField": "CVSS_v3_Severity_s",
                "graphOrientation": 3,
                "showOrientationToggles": false,
                "nodeSize": null,
                "staticNodeSize": 100,
                "colorSettings": null,
                "hivesMargin": 5
              },
              "textSettings": {
                "style": "bignumber"
              }
            },
            "name": "query - 7"
          },
          {
            "type": 1,
            "content": {
              "json": "## System Outliers\n#### Based on CVE (v3) Count & Aggregate CVSS Score"
            },
            "name": "visualization title"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let lastRunTime = toscalar(\n    TaniumComplyVulnerabilities_CL\n    | extend roundedTime = bin(TimeGenerated, 1m) \n    | distinct roundedTime    \n    | order by roundedTime desc     \n    | limit 1);\n    \nTaniumComplyVulnerabilities_CL\n|where TimeGenerated >= lastRunTime\n    and Scan_Type_s != 'container registries'\n    and CVSS_v3_Severity_s != 'Unscored'\n|distinct CVE_s,Computer_Name_s,CVSS_v3_Score_d, Operating_System_Generation_s\n|summarize  CVECount=dcount(CVE_s), cvss_endpoint_score=sum(todecimal(CVSS_v3_Score_d)) by Computer_Name_s, Operating_System_Generation_s\n|sort by cvss_endpoint_score asc",
              "size": 0,
              "timeContext": {
                "durationMs": 604800000
              },
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "scatterchart",
              "tileSettings": {
                "showBorder": false,
                "titleContent": {
                  "columnMatch": "Computer_Name_s",
                  "formatter": 1
                },
                "leftContent": {
                  "columnMatch": "cvss_endpoint_score",
                  "formatter": 12,
                  "formatOptions": {
                    "palette": "auto"
                  },
                  "numberFormat": {
                    "unit": 17,
                    "options": {
                      "maximumSignificantDigits": 3,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              },
              "graphSettings": {
                "type": 0,
                "topContent": {
                  "columnMatch": "Computer_Name_s",
                  "formatter": 1
                },
                "centerContent": {
                  "columnMatch": "cvss_endpoint_score",
                  "formatter": 1,
                  "numberFormat": {
                    "unit": 17,
                    "options": {
                      "maximumSignificantDigits": 3,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              },
              "chartSettings": {
                "xAxis": "cvss_endpoint_score",
                "yAxis": [
                  "CVECount"
                ],
                "showLegend": true,
                "customThresholdLine": "{cvecount}",
                "customThresholdLineStyle": 5
              },
              "mapSettings": {
                "locInfo": "LatLong",
                "sizeSettings": "cvss_endpoint_score",
                "sizeAggregation": "Sum",
                "legendMetric": "cvss_endpoint_score",
                "legendAggregation": "Sum",
                "itemColorSettings": {
                  "type": "heatmap",
                  "colorAggregation": "Sum",
                  "nodeColorField": "cvss_endpoint_score",
                  "heatmapPalette": "greenRed"
                }
              }
            },
            "name": "query - 15"
          },
          {
            "type": 1,
            "content": {
              "json": "## Compliance Benchmark - Pass Rate"
            },
            "name": "visualization title"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "TaniumComplyCompliance_CL\n|where  Rule_ID_s != ''\n    and Rule_ID_s != '[no results]'\n    and Status_Category_s != 'Error'\n|summarize  Total=count(), Pass=countif(Status_Category_s has 'Pass'), Fail=countif(Status_Category_s has 'Fail'), Informational=countif(Status_Category_s has 'Informational')\n|extend PassRate=(Pass*1.0/Total)*100\n|project PassRate",
              "size": 1,
              "timeContext": {
                "durationMs": 604800000
              },
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "tiles",
              "tileSettings": {
                "titleContent": {
                  "columnMatch": "PassRate",
                  "formatter": 12,
                  "formatOptions": {
                    "palette": "redGreen"
                  },
                  "numberFormat": {
                    "unit": 1,
                    "options": {
                      "style": "decimal",
                      "maximumFractionDigits": 0
                    }
                  }
                },
                "showBorder": false
              }
            },
            "name": "query - 11"
          },
          {
            "type": 1,
            "content": {
              "json": "## Top 10 Benchmark Failures"
            },
            "name": "visualization title"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "TaniumComplyCompliance_CL \n|where  Rule_ID_s <> \"\" and Status_Category_s has \"fail\"\n|summarize Count=count() by RuleID=Rule_ID_s\n|top 10 by Count",
              "size": 0,
              "timeContext": {
                "durationMs": 2592000000
              },
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "name": "query - 13"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "selectedTab",
        "comparison": "isEqualTo",
        "value": "Comply"
      },
      "customWidth": "100",
      "name": "comply group",
      "styleSettings": {
        "maxWidth": "100"
      }
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "## Unmanaged OS Platform\n"
            },
            "name": "visualization title"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let lastRunTime = toscalar(\n    TaniumDiscoverUnmanagedAssets_CL\n    | extend roundedTime = bin(TimeGenerated, 1m) \n    | distinct roundedTime    \n    | order by roundedTime desc     \n    | limit 1);\n    \n    TaniumDiscoverUnmanagedAssets_CL\n    | where TimeGenerated >= lastRunTime and Os_s <> '' \n    | distinct MacAddress_s, Os_s\n    | summarize count() by Os_s\n    \n    ",
              "size": 0,
              "timeContext": {
                "durationMs": 2592000000
              },
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "piechart"
            },
            "name": "visualization title"
          },
          {
            "type": 1,
            "content": {
              "json": "## Unmanaged Device Type"
            },
            "name": "visualization title"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let lastRunTime = toscalar(\nTaniumDiscoverUnmanagedAssets_CL\n| extend roundedTime = bin(TimeGenerated, 1m) \n| distinct roundedTime    \n| order by roundedTime desc     \n| limit 1);\n\nTaniumDiscoverUnmanagedAssets_CL\n|where TimeGenerated >= lastRunTime and  MacOrganization_s <> '' \n|distinct MacAddress_s, MacOrganization_s\n|summarize count() by MacOrganization_s",
              "size": 0,
              "timeContext": {
                "durationMs": 2592000000
              },
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "piechart"
            },
            "name": "query - 3"
          },
          {
            "type": 1,
            "content": {
              "json": "## Unmanaged Open Ports"
            },
            "name": "visualization title"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let lastRunTime = toscalar(\n    TaniumDiscoverUnmanagedAssets_CL\n    | extend roundedTime = bin(TimeGenerated, 1m) \n    | distinct roundedTime    \n    | order by roundedTime desc     \n    | limit 1);\n\nTaniumDiscoverUnmanagedAssets_CL\n| where TimeGenerated >= lastRunTime\n    and Ports_s != '' \n| distinct MacAddress_s,Ports_s\n| extend dPort = parse_json(strcat('[', Ports_s, ']'))\n| mv-expand  dPort\n| extend Port = tostring(dPort)\n| project MacAddress_s, Port\n| summarize count() by Port;",
              "size": 0,
              "timeContext": {
                "durationMs": 2592000000
              },
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "piechart"
            },
            "name": "query - 5"
          },
          {
            "type": 1,
            "content": {
              "json": "## All Unmanaged Assets"
            },
            "name": "visualization title"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let lastRunTime = toscalar(\nTaniumDiscoverUnmanagedAssets_CL\n| extend roundedTime = bin(TimeGenerated, 1m) \n| distinct roundedTime    \n| order by roundedTime desc     \n| limit 1);\n\nTaniumDiscoverUnmanagedAssets_CL\n| where TimeGenerated >= lastRunTime and HostName_s <> ''\n| project Hostname=HostName_s, MacAddres=MacAddress_s, IPAddress, MacOrganization=MacOrganization_s, LastDiscoveredTime=LastDiscoveredAt_t\n| sort by LastDiscoveredTime",
              "size": 0,
              "timeContext": {
                "durationMs": 86400000
              },
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "name": "query - 7"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "selectedTab",
        "comparison": "isEqualTo",
        "value": "Discover"
      },
      "name": "discover_group"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "Microsoft Tooling Health ",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "## MSFT Defender Installation Status"
            },
            "name": "text - 0"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let cleanLeft = (s:string) { iff(s startswith '[\"', substring(s,2), s) };\nlet cleanRight = (s:string) { iff(s endswith '\"]', substring(s, 0, strlen(s) - 2), s) };\nlet clean = (s:string) { cleanLeft(cleanRight(s)) };\nlet status = (s:string) { iff(s == 'True', 'Installed', iff(s == 'False', 'Not Installed', iff(s == '', 'Unknown', s)))};\n\nlet lastRunTime = toscalar(\nTaniumDefenderHealth_CL\n| extend roundedTime = bin(TimeGenerated, 1m) \n| distinct roundedTime    \n| order by roundedTime desc     \n| limit 1);    \n\nlet MsftDefenderHealth =\nTaniumDefenderHealth_CL\n| where TimeGenerated >= lastRunTime\n| extend ComputerName = clean(Computer_Name_s)\n| extend Status = status(clean(Is_Defender_Installed_s))\n| project ComputerName, Status, TimeGenerated;\n\nMsftDefenderHealth\n| summarize Endpoints = count () by Status",
              "size": 0,
              "timeContext": {
                "durationMs": 86400000
              },
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "piechart"
            },
            "name": "query - 1"
          },
          {
            "type": 1,
            "content": {
              "json": "## MSFT Defender Health Status"
            },
            "name": "text - 2"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let cleanLeft = (s:string) { iff(s startswith '[\"', substring(s,2), s) };\nlet cleanRight = (s:string) { iff(s endswith '\"]', substring(s, 0, strlen(s) - 2), s) };\nlet clean = (s:string) { cleanLeft(cleanRight(s)) };\nlet installationStatus = (s:string) { iff(s == 'True', 'Installed', iff(s == 'False', 'Not Installed', iff(s == '', 'Unknown', s)))};\nlet status = (s:string) { iff(s == 'True', 'Healthy', iff(s == 'False', 'Unhealthy', s))};\n\nlet lastRunTime = toscalar(\nTaniumDefenderHealth_CL\n| extend roundedTime = bin(TimeGenerated, 1m) \n| distinct roundedTime\n| order by roundedTime desc\n| limit 1);\n\nlet MsftDefenderHealth =\nTaniumDefenderHealth_CL\n| where TimeGenerated >= lastRunTime\n| extend ComputerName = clean(Computer_Name_s)\n| extend IsDefenderInstalled = installationStatus(clean(Is_Defender_Installed_s))\n| extend Status = status(clean(Is_Defender_Healthy_s))\n| project ComputerName, IsDefenderInstalled, Status, TimeGenerated;\n\nMsftDefenderHealth\n| where IsDefenderInstalled == 'Installed'\n| summarize Endpoints = count () by Status",
              "size": 0,
              "timeContext": {
                "durationMs": 86400000
              },
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "piechart"
            },
            "name": "query - 3"
          },
          {
            "type": 1,
            "content": {
              "json": "## MSFT Defender AnitMalware Status"
            },
            "name": "text - 22"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let cleanLeft = (s:string) { iff(s startswith '[\"', substring(s,2), s) };\nlet cleanRight = (s:string) { iff(s endswith '\"]', substring(s, 0, strlen(s) - 2), s) };\nlet clean = (s:string) { cleanLeft(cleanRight(s)) };\nlet installationStatus = (s:string) { iff(s == 'True', 'Installed', iff(s == 'False', 'Not Installed', iff(s == '', 'Unknown', s)))};\nlet defenderHealth = (s: string) { iif(s == 'True', 'Healthy', iff(s == 'False', 'Unhealthy', s))};\nlet malwareStatus = (s:string) { iff(s == 'True', 'Enabled', iff(s == 'False', 'Not Enabled', iff(s == '', 'Unknown', s)))};\n\nlet lastRunTime = toscalar(\nTaniumDefenderHealth_CL\n| extend roundedTime = bin(TimeGenerated, 1m) \n| distinct roundedTime    \n| order by roundedTime desc     \n| limit 1);   \n\nlet MsftDefenderHealth =\nTaniumDefenderHealth_CL\n| where TimeGenerated >= lastRunTime\n| extend ComputerName = clean(Computer_Name_s)\n| extend IsDefenderInstalled = installationStatus(clean(Is_Defender_Installed_s))\n| extend DefenderHealth = defenderHealth(clean(Is_Defender_Healthy_s))\n| extend IsAntiMalwareEnabled = malwareStatus(clean(Is_AntiMalware_Service_Enabled_s))\n| project ComputerName, IsDefenderInstalled, DefenderHealth, IsAntiMalwareEnabled, TimeGenerated;\n\nMsftDefenderHealth\n| where IsDefenderInstalled == 'Installed' and DefenderHealth == 'Healthy'\n| summarize Endpoints = count () by IsAntiMalwareEnabled\n",
              "size": 0,
              "timeContext": {
                "durationMs": 86400000
              },
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "piechart"
            },
            "name": "query - 32"
          },
          {
            "type": 1,
            "content": {
              "json": "## MSFT Defender AntiSpyware Status"
            },
            "name": "text - 21"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let cleanLeft = (s:string) { iff(s startswith '[\"', substring(s,2), s) };\nlet cleanRight = (s:string) { iff(s endswith '\"]', substring(s, 0, strlen(s) - 2), s) };\nlet clean = (s:string) { cleanLeft(cleanRight(s)) };\nlet installationStatus = (s:string) { iff(s == 'True', 'Installed', iff(s == 'False', 'Not Installed', iff(s == '', 'Unknown', s)))};\nlet defenderHealth = (s: string) { iif(s == 'True', 'Healthy', iff(s == 'False', 'Unhealthy', s))};\nlet spywareStatus = (s:string) { iff(s == 'True', 'Enabled', iff(s == 'False', 'Not Enabled', iff(s == '', 'Unknown', s)))};\n\nlet lastRunTime = toscalar(\nTaniumDefenderHealth_CL\n| extend roundedTime = bin(TimeGenerated, 1m) \n| distinct roundedTime    \n| order by roundedTime desc     \n| limit 1);   \n\nlet MsftDefenderHealth =\nTaniumDefenderHealth_CL\n| where TimeGenerated >= lastRunTime\n| extend ComputerName = clean(Computer_Name_s)\n| extend IsDefenderInstalled = installationStatus(clean(Is_Defender_Installed_s))\n| extend DefenderHealth = defenderHealth(clean(Is_Defender_Healthy_s))\n| extend IsAntiSpywareEnabled = spywareStatus(clean(Is_AntiSpyware_Service_Enabled_s))\n| project ComputerName, IsDefenderInstalled, DefenderHealth, IsAntiSpywareEnabled, TimeGenerated;\n\nMsftDefenderHealth\n| where IsDefenderInstalled == 'Installed' and DefenderHealth == 'Healthy'\n| summarize Endpoints = count () by IsAntiSpywareEnabled",
              "size": 0,
              "timeContext": {
                "durationMs": 86400000
              },
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "piechart"
            },
            "name": "query - 31"
          },
          {
            "type": 1,
            "content": {
              "json": "## MSFT Defender AntiSpyware Signature Update Age\n#### Count of endpoints in days"
            },
            "name": "text - 4"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let cleanLeft = (s:string) { iff(s startswith '[\"', substring(s,2), s) };\nlet cleanRight = (s:string) { iff(s endswith '\"]', substring(s, 0, strlen(s) - 2), s) };\nlet clean = (s:string) { cleanLeft(cleanRight(s)) };\nlet installationStatus = (s:string) { iff(s == 'True', 'Installed', iff(s == 'False', 'Not Installed', iff(s == '', 'Unknown', s)))};\nlet spywareStatus = (s:string) { iff(s == 'True', 'Enabled', iff(s == 'False', 'Not Enabled', iff(s == '', 'Unknown', s)))};\n\nlet lastRunTime = toscalar(\nTaniumDefenderHealth_CL\n| extend roundedTime = bin(TimeGenerated, 1m) \n| distinct roundedTime    \n| order by roundedTime desc     \n| limit 1);   \n\nlet MsftDefenderHealth =\nTaniumDefenderHealth_CL\n| where TimeGenerated >= lastRunTime\n| extend ComputerName = clean(Computer_Name_s)\n| extend IsDefenderInstalled = installationStatus(clean(Is_Defender_Installed_s))\n| extend IsAntiSpywareEnabled = spywareStatus(clean(Is_AntiSpyware_Service_Enabled_s))\n| extend SignatureUpdateAge = toint(clean(AntiSpyware_Signature_Days_Age_s))\n| project ComputerName, SignatureUpdateAge, IsDefenderInstalled, IsAntiSpywareEnabled, TimeGenerated;\n\nMsftDefenderHealth\n| where IsDefenderInstalled == 'Installed' and IsAntiSpywareEnabled == 'Enabled'\n| summarize Endpoints = count () by UpdateAge = strcat(SignatureUpdateAge, ' Days'), SignatureUpdateAge\n| order by SignatureUpdateAge desc",
              "size": 0,
              "timeContext": {
                "durationMs": 86400000
              },
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "categoricalbar",
              "chartSettings": {
                "xAxis": "UpdateAge",
                "yAxis": "Endpoints",
                "xSettings": {
                  "label": "Age (Days)"
                },
                "ySettings": {
                  "label": "Count"
                }
              }
            },
            "name": "query - 5"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "selectedTab",
        "comparison": "isEqualTo",
        "value": "Microsoft Tooling Health"
      },
      "customWidth": "50",
      "name": "tooling health column 1"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "MEMCM Health",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "## MEMCM Health Status"
            },
            "name": "text - 0"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "TaniumSCCMClientHealth_CL\n|where Health_Status_s !has \"N/A\"\n|project Computer_Name=Computer_Name_s,Health_Status=Health_Status_s, Reason=Reason_s",
              "size": 0,
              "timeContext": {
                "durationMs": 86400000
              },
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "name": "query - 1"
          },
          {
            "type": 1,
            "content": {
              "json": "## MEMCM Health Issues"
            },
            "name": "text - 2"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "TaniumSCCMClientHealth_CL\n|where Reason_s <> \"\"\n|summarize count() by Reason_s\n|project Health_Status=Reason_s,Count=count_\n|render piechart",
              "size": 0,
              "timeContext": {
                "durationMs": 86400000
              },
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "name": "query - 3"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "selectedTab",
        "comparison": "isEqualTo",
        "value": "Microsoft Tooling Health"
      },
      "customWidth": "50",
      "name": "tooling health column 2"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "## Intel Names over time"
            },
            "name": "text - 1"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "TaniumThreatResponse_CL\n|project Computer_Name_s,Timestamp_t,Intel_Name_s\n|summarize count () by Timestamp_t, Intel_Name_s\n|render areachart",
              "size": 0,
              "timeContext": {
                "durationMs": 2592000000
              },
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "name": "query - 0"
          },
          {
            "type": 1,
            "content": {
              "json": "## Threat Response Alert Types"
            },
            "name": "text - 2"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "TaniumThreatResponse_CL\n| summarize count() by Intel_Type_s\n| render piechart  ",
              "size": 0,
              "timeContext": {
                "durationMs": 2592000000
              },
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "name": "query - 3"
          },
          {
            "type": 1,
            "content": {
              "json": "## THR Alert by User\n"
            },
            "name": "text - 4"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "TaniumThreatResponse_CL\n| summarize count() by Match_Details_match_properties_user_s\n| render piechart  ",
              "size": 0,
              "timeContext": {
                "durationMs": 2592000000
              },
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "name": "query - 5"
          },
          {
            "type": 1,
            "content": {
              "json": "## Threat Response Alerts by Process Name"
            },
            "name": "text - 6"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "TaniumThreatResponse_CL\n| where isnotempty(Match_Details_match_properties_name_s)\n| extend ActingProcessName = Match_Details_match_properties_name_s\n| summarize event_count=count() by bin(Timestamp_t, 7d), ActingProcessName\n| top 20 by event_count\n| render barchart",
              "size": 0,
              "timeContext": {
                "durationMs": 2592000000
              },
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "name": "query - 7"
          },
          {
            "type": 1,
            "content": {
              "json": "## All Alerts by Computer Name"
            },
            "name": "text - 8"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "TaniumThreatResponse_CL\n|summarize count() by Computer_Name_s, Intel_Name_s\n|project-rename Computer_Name=Computer_Name_s, Intel_Name=Intel_Name_s, Count=count_\n|sort by Count",
              "size": 0,
              "timeContext": {
                "durationMs": 2592000000
              },
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "name": "query - 9"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "selectedTab",
        "comparison": "isEqualTo",
        "value": "Threat Response"
      },
      "name": "Threat Response"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "## Reboot Required"
            },
            "name": "text - 0"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "\nlet lastRunTime = toscalar(\nTaniumHighUptime_CL\n| extend roundedTime = bin(TimeGenerated, 1m) \n| distinct roundedTime    \n| order by roundedTime desc     \n| limit 1);    \n\nTaniumHighUptime_CL\n| where TimeGenerated >= lastRunTime\n|project TimeGenerated, Computer_Name_s,Reboot_Required_s\n|where Reboot_Required_s contains 'Yes'\n|count",
              "size": 4,
              "timeContext": {
                "durationMs": 86400000
              },
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "card",
              "tileSettings": {
                "showBorder": false
              },
              "textSettings": {
                "style": "bignumber"
              }
            },
            "name": "query - 1"
          },
          {
            "type": 1,
            "content": {
              "json": "## Endpoints with High Uptime (>=30 days)"
            },
            "name": "text - 2"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let cleanLeft = (s:string) { iff(s startswith '[\"', substring(s,2), s) };\nlet cleanRight = (s:string) { iff(s endswith '\"]', substring(s, 0, strlen(s) - 2), s) };\nlet clean = (s:string) { cleanLeft(cleanRight(s)) };\nlet parseDayCount = (s:string) { toint(split(s, ' ', 0)[0]) };\n\nlet lastRunTime = toscalar(\nTaniumHighUptime_CL\n| extend roundedTime = bin(TimeGenerated, 1m) \n| distinct roundedTime    \n| order by roundedTime desc     \n| limit 1);  \n\nTaniumHighUptime_CL\n| where TimeGenerated >= lastRunTime and High_Uptime_s contains 'days'\n| extend Days=parseDayCount(High_Uptime_s)\n| project ['Computer Name']=clean(Computer_Name_s), Days",
              "size": 1,
              "timeContext": {
                "durationMs": 86400000
              },
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "table",
              "tileSettings": {
                "showBorder": false,
                "titleContent": {
                  "columnMatch": "Computer_Name",
                  "formatter": 1
                },
                "leftContent": {
                  "columnMatch": "Days",
                  "formatter": 12,
                  "formatOptions": {
                    "palette": "auto"
                  },
                  "numberFormat": {
                    "unit": 17,
                    "options": {
                      "maximumSignificantDigits": 3,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              },
              "graphSettings": {
                "type": 0
              }
            },
            "name": "query - 3"
          },
          {
            "type": 1,
            "content": {
              "json": "## Patch Compliance - All Patches"
            },
            "name": "text - 4",
            "styleSettings": {
              "margin": "50"
            }
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let getIndex = (s:string) { array_index_of(parse_json(s), 'All Patches') };\nlet getDisplayOrder = (s:string) { iff(s startswith 'Over', 101, iff(s == 'Compliant', 0, split(s, ' ', 0)[0])) };\n\nlet lastRunTime = toscalar(\nTaniumPatchListCompliance_CL\n| extend roundedTime = bin(TimeGenerated, 1m) \n| distinct roundedTime    \n| order by roundedTime desc     \n| limit 1);  \n\nTaniumPatchListCompliance_CL\n| where TimeGenerated >= lastRunTime and Patch_List_Name_s contains 'All Patches'\n| extend patchIndex = getIndex(Patch_List_Name_s)\n| extend PatchId = parse_json(Patch_List_Id_s)[patchIndex]\n| extend ComplianceStatus = tostring(parse_json(Compliance_Status_s)[patchIndex])\n| extend OrderValue = getDisplayOrder(ComplianceStatus)\n| project Computer_Name_s, ComplianceStatus, OrderValue\n| summarize Endpoints = count (), SortOrder = min(OrderValue) by ComplianceStatus\n| order by SortOrder desc\n",
              "size": 0,
              "timeContext": {
                "durationMs": 86400000
              },
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "piechart"
            },
            "name": "query - 5"
          },
          {
            "type": 1,
            "content": {
              "json": "## Severity of Missing Patches\n"
            },
            "name": "text - 6"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let lastRunTime = toscalar(\nTaniumPatchListApplicability_CL\n| extend roundedTime = bin(TimeGenerated, 1m) \n| distinct roundedTime    \n| order by roundedTime desc     \n| limit 1);  \n\nTaniumPatchListApplicability_CL\n| where TimeGenerated >= lastRunTime\n| extend PatchId = parse_json(Patch_List_Ids_s)\n| extend Title = parse_json(Title_s)\n| extend InstallStatus = parse_json(Install_Status_s)\n| extend Superseded = parse_json(Superseded_s)\n| extend Severity = parse_json(Severity_s)\n| mv-expand PatchId, Title, InstallStatus, Superseded, Severity\n| project PatchId, Title, InstallStatus, Superseded, Severity\n| where InstallStatus == 'Not Installed'\n    and Superseded == 'False'\n| distinct tostring(PatchId), tostring(Title), tostring(Severity)\n| summarize PatchCount = count() by Severity",
              "size": 0,
              "timeContext": {
                "durationMs": 86400000
              },
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "piechart"
            },
            "name": "query - 7"
          },
          {
            "type": 1,
            "content": {
              "json": "## Patch Coverage Status"
            },
            "name": "text - 8"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let cleanStatus = (s:string) { iff(s == '[no results]', 'No Results', iff(s == 'TSE-Error: Error', 'TSE-Error', s)) };\nlet lastRunTime = toscalar(\nTaniumPatchCoverageStatus_CL\n| extend roundedTime = bin(TimeGenerated, 1m) \n| distinct roundedTime    \n| order by roundedTime desc     \n| limit 1);  \n\nTaniumPatchCoverageStatus_CL\n| where TimeGenerated >= lastRunTime\n    and Status_s != 'Unsuppported'\n    and Status_s != 'N/A on Tanium Client Container'\n    and Status_s != 'An exception occurred, please see Patch sensors.log file for details.'\n    and Status_s != ''\n| extend Status = cleanStatus(Status_s)\n| summarize count() by Status",
              "size": 0,
              "timeContext": {
                "durationMs": 86400000
              },
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "piechart",
              "chartSettings": {
                "seriesLabelSettings": [
                  {
                    "seriesName": "Needs Attention",
                    "color": "orange"
                  },
                  {
                    "seriesName": "TSE-Error",
                    "color": "redBright"
                  },
                  {
                    "seriesName": "Optimal",
                    "color": "green"
                  },
                  {
                    "seriesName": "Initializing",
                    "color": "purple"
                  },
                  {
                    "seriesName": "No Results",
                    "color": "blue"
                  }
                ]
              }
            },
            "name": "query - 9"
          },
          {
            "type": 1,
            "content": {
              "json": "## Important/Critical Missing Patches by Year"
            },
            "name": "text - 10"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let getReleaseYear = (s:string){ split(s,'/',2)[0] };\n\nlet lastRunTime = toscalar(\nTaniumPatchListApplicability_CL\n| extend roundedTime = bin(TimeGenerated, 1m) \n| distinct roundedTime    \n| order by roundedTime desc     \n| limit 1);  \n\nTaniumPatchListApplicability_CL\n| where TimeGenerated >= lastRunTime\n| extend PatchId = parse_json(Patch_List_Ids_s)\n| extend Title = parse_json(Title_s)\n| extend KbArticle = parse_json(KB_Articles_s)\n| extend InstallStatus = parse_json(Install_Status_s)\n| extend Severity = parse_json(Severity_s)\n| extend Superseded = parse_json(Superseded_s)\n| extend ReleaseDate = parse_json(Release_Date_s)\n| mv-expand PatchId, Title, KbArticle, InstallStatus, Severity, ReleaseDate, Superseded\n| where InstallStatus == 'Not Installed'\n    and (Severity == 'Critical' or Severity == 'Important')\n    and Superseded == 'False'\n| extend ReleaseYear = strcat('Year ', getReleaseYear(ReleaseDate))\n| where Title != ''\n| distinct tostring(Title), tostring(ReleaseYear), tostring(Severity)\n| summarize Patches = count() by ReleaseYear, Severity\n| order by ReleaseYear asc",
              "size": 0,
              "timeContext": {
                "durationMs": 86400000
              },
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "categoricalbar"
            },
            "name": "query - 11"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "selectedTab",
        "comparison": "isEqualTo",
        "value": "Patch"
      },
      "name": "Patch"
    }
  ],
  "fallbackResourceIds": [],
  "fromTemplateId": "sentinel-TaniumWorkbook",
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}