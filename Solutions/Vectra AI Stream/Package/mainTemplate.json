{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "author": "Microsoft - support@microsoft.com",
    "comments": "Solution template for Vectra AI Stream"
  },
  "parameters": {
    "location": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Not used, but needed to pass arm-ttk test `Location-Should-Not-Be-Hardcoded`.  We instead use the `workspace-location` which is derived from the LA workspace"
      }
    },
    "workspace-location": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "[concat('Region to deploy solution resources -- separate from location selection',parameters('location'))]"
      }
    },
    "workspace": {
      "defaultValue": "",
      "type": "string",
      "metadata": {
        "description": "Workspace name for Log Analytics where Microsoft Sentinel is setup"
      }
    }
  },
  "variables": {
    "solutionId": "vectraaiinc.vetra_sentinel_solution",
    "_solutionId": "[variables('solutionId')]",
    "email": "support@microsoft.com",
    "_email": "[variables('email')]",
    "workspaceResourceId": "[resourceId('microsoft.OperationalInsights/Workspaces', parameters('workspace'))]",
    "uiConfigId1": "AIVectraStream",
    "_uiConfigId1": "[variables('uiConfigId1')]",
    "dataConnectorContentId1": "AIVectraStream",
    "_dataConnectorContentId1": "[variables('dataConnectorContentId1')]",
    "dataConnectorId1": "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectors', variables('_dataConnectorContentId1'))]",
    "_dataConnectorId1": "[variables('dataConnectorId1')]",
    "dataConnectorTemplateSpecName1": "[concat(parameters('workspace'),'-dc-',uniquestring(variables('_dataConnectorContentId1')))]",
    "dataConnectorVersion1": "1.0.0",
    "parserVersion1": "1.0.0",
    "parserContentId1": "VectraStream_function-Parser",
    "_parserContentId1": "[variables('parserContentId1')]",
    "parserName1": "VectraStream_function",
    "_parserName1": "[concat(parameters('workspace'),'/',variables('parserName1'))]",
    "parserId1": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), variables('parserName1'))]",
    "_parserId1": "[variables('parserId1')]",
    "parserTemplateSpecName1": "[concat(parameters('workspace'),'-pr-',uniquestring(variables('_parserContentId1')))]",
    "huntingQueryVersion1": "1.0.0",
    "huntingQuerycontentId1": "9e8038a8-926f-48cd-9075-5f69b15f5192",
    "_huntingQuerycontentId1": "[variables('huntingQuerycontentId1')]",
    "huntingQueryId1": "[resourceId('Microsoft.OperationalInsights/savedSearches', variables('_huntingQuerycontentId1'))]",
    "huntingQueryTemplateSpecName1": "[concat(parameters('workspace'),'-hq-',uniquestring(variables('_huntingQuerycontentId1')))]",
    "huntingQueryVersion2": "1.0.0",
    "huntingQuerycontentId2": "e10782ff-f379-4b59-bccf-4724b73e21f9",
    "_huntingQuerycontentId2": "[variables('huntingQuerycontentId2')]",
    "huntingQueryId2": "[resourceId('Microsoft.OperationalInsights/savedSearches', variables('_huntingQuerycontentId2'))]",
    "huntingQueryTemplateSpecName2": "[concat(parameters('workspace'),'-hq-',uniquestring(variables('_huntingQuerycontentId2')))]",
    "huntingQueryVersion3": "1.0.0",
    "huntingQuerycontentId3": "59aae46b-38a4-4540-b6da-caa59bc34685",
    "_huntingQuerycontentId3": "[variables('huntingQuerycontentId3')]",
    "huntingQueryId3": "[resourceId('Microsoft.OperationalInsights/savedSearches', variables('_huntingQuerycontentId3'))]",
    "huntingQueryTemplateSpecName3": "[concat(parameters('workspace'),'-hq-',uniquestring(variables('_huntingQuerycontentId3')))]",
    "huntingQueryVersion4": "1.0.0",
    "huntingQuerycontentId4": "797a5246-351e-407a-92cd-f60f9d9f890c",
    "_huntingQuerycontentId4": "[variables('huntingQuerycontentId4')]",
    "huntingQueryId4": "[resourceId('Microsoft.OperationalInsights/savedSearches', variables('_huntingQuerycontentId4'))]",
    "huntingQueryTemplateSpecName4": "[concat(parameters('workspace'),'-hq-',uniquestring(variables('_huntingQuerycontentId4')))]",
    "huntingQueryVersion5": "1.0.0",
    "huntingQuerycontentId5": "489d1c70-5fe2-426b-afbe-371ab58605fe",
    "_huntingQuerycontentId5": "[variables('huntingQuerycontentId5')]",
    "huntingQueryId5": "[resourceId('Microsoft.OperationalInsights/savedSearches', variables('_huntingQuerycontentId5'))]",
    "huntingQueryTemplateSpecName5": "[concat(parameters('workspace'),'-hq-',uniquestring(variables('_huntingQuerycontentId5')))]",
    "huntingQueryVersion6": "1.0.0",
    "huntingQuerycontentId6": "98ce0ffc-eb1d-458e-835f-6c72ff4d53d1",
    "_huntingQuerycontentId6": "[variables('huntingQuerycontentId6')]",
    "huntingQueryId6": "[resourceId('Microsoft.OperationalInsights/savedSearches', variables('_huntingQuerycontentId6'))]",
    "huntingQueryTemplateSpecName6": "[concat(parameters('workspace'),'-hq-',uniquestring(variables('_huntingQuerycontentId6')))]",
    "huntingQueryVersion7": "1.0.0",
    "huntingQuerycontentId7": "b8661942-b3ba-48a4-ae9d-db7c326ebd46",
    "_huntingQuerycontentId7": "[variables('huntingQuerycontentId7')]",
    "huntingQueryId7": "[resourceId('Microsoft.OperationalInsights/savedSearches', variables('_huntingQuerycontentId7'))]",
    "huntingQueryTemplateSpecName7": "[concat(parameters('workspace'),'-hq-',uniquestring(variables('_huntingQuerycontentId7')))]",
    "huntingQueryVersion8": "1.0.0",
    "huntingQuerycontentId8": "3826de45-7300-44d7-800d-a2b457439dda",
    "_huntingQuerycontentId8": "[variables('huntingQuerycontentId8')]",
    "huntingQueryId8": "[resourceId('Microsoft.OperationalInsights/savedSearches', variables('_huntingQuerycontentId8'))]",
    "huntingQueryTemplateSpecName8": "[concat(parameters('workspace'),'-hq-',uniquestring(variables('_huntingQuerycontentId8')))]",
    "huntingQueryVersion9": "1.0.0",
    "huntingQuerycontentId9": "b8bacbda-3faa-49fb-b000-9334b2b51c8e",
    "_huntingQuerycontentId9": "[variables('huntingQuerycontentId9')]",
    "huntingQueryId9": "[resourceId('Microsoft.OperationalInsights/savedSearches', variables('_huntingQuerycontentId9'))]",
    "huntingQueryTemplateSpecName9": "[concat(parameters('workspace'),'-hq-',uniquestring(variables('_huntingQuerycontentId9')))]",
    "huntingQueryVersion10": "1.0.0",
    "huntingQuerycontentId10": "5e3e6cd2-1fba-44c0-8ddf-ad599a06a9df",
    "_huntingQuerycontentId10": "[variables('huntingQuerycontentId10')]",
    "huntingQueryId10": "[resourceId('Microsoft.OperationalInsights/savedSearches', variables('_huntingQuerycontentId10'))]",
    "huntingQueryTemplateSpecName10": "[concat(parameters('workspace'),'-hq-',uniquestring(variables('_huntingQuerycontentId10')))]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/templateSpecs",
      "apiVersion": "2021-05-01",
      "name": "[variables('dataConnectorTemplateSpecName1')]",
      "location": "[parameters('workspace-location')]",
      "tags": {
        "hidden-sentinelWorkspaceId": "[variables('workspaceResourceId')]",
        "hidden-sentinelContentType": "DataConnector"
      },
      "properties": {
        "description": "Vectra AI Stream data connector with template",
        "displayName": "Vectra AI Stream template"
      }
    },
    {
      "type": "Microsoft.Resources/templateSpecs/versions",
      "apiVersion": "2021-05-01",
      "name": "[concat(variables('dataConnectorTemplateSpecName1'),'/',variables('dataConnectorVersion1'))]",
      "location": "[parameters('workspace-location')]",
      "tags": {
        "hidden-sentinelWorkspaceId": "[variables('workspaceResourceId')]",
        "hidden-sentinelContentType": "DataConnector"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/templateSpecs', variables('dataConnectorTemplateSpecName1'))]"
      ],
      "properties": {
        "description": "Vectra AI Stream data connector with template version 2.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('dataConnectorVersion1')]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',variables('_dataConnectorContentId1'))]",
              "apiVersion": "2021-03-01-preview",
              "type": "Microsoft.OperationalInsights/workspaces/providers/dataConnectors",
              "location": "[parameters('workspace-location')]",
              "kind": "GenericUI",
              "properties": {
                "connectorUiConfig": {
                  "id": "[variables('_uiConfigId1')]",
                  "title": "AI Vectra Stream",
                  "publisher": "Vectra AI",
                  "descriptionMarkdown": "The AI Vectra Stream connector allows to send Network Metadata colelcted by Vectra Sensors accross the Network and Cloud to Microsoft sentinel",
                  "additionalRequirementBanner": "This data connector depends on a parser based on a Kusto Function to work as expected [**VectraStream**](https://aka.ms/sentinel-aivectrastream-parser) which is deployed with the Microsoft sentinel Solution.",
                  "graphQueries": [
                    {
                      "metricName": "Total data received",
                      "legend": "VectraStream_CL",
                      "baseQuery": "VectraStream_CL"
                    }
                  ],
                  "sampleQueries": [
                    {
                      "description": "List all DNS Queries",
                      "query": "VectraStream \n| where metadata_type == \"metadat_dns\" \n| project orig_hostname, id_orig_h, resp_hostname, id_resp_h, id_resp_p, qtype_name, ['query'], answers"
                    },
                    {
                      "description": "Number of DNS requests per type",
                      "query": "VectraStream \n| where metadata_type == \"metadat_dns\" \n| summarize count() by type_name"
                    },
                    {
                      "description": "Top 10 of query to non existing domain",
                      "query": "VectraStream \n| where metadata_type == \"metadat_dns\" \n| where rcode_name == \"NXDomain\"\n| summarize Count=count() by tostring(query)\n| order by Count desc\n| limit 10"
                    },
                    {
                      "description": "Host and Web sites using non-ephemeral Diffie-Hellman key exchange",
                      "query": "VectraStream \n| where metadata_type == \"metadat_dns\" \n| where cipher contains \"TLS_RSA\"\n| distinct orig_hostname, id_orig_h, id_resp_h, server_name, cipher\n| project orig_hostname, id_orig_h, id_resp_h, server_name, cipher"
                    }
                  ],
                  "dataTypes": [
                    {
                      "name": "VectraStream_CL",
                      "lastDataReceivedQuery": "\nVectraStream\n |  summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
                    }
                  ],
                  "connectivityCriterias": [
                    {
                      "type": "IsConnectedQuery",
                      "value": [
                        "\nVectraStream\n| summarize LastLogReceived = max(TimeGenerated)\n| project IsConnected = LastLogReceived > ago(30d)"
                      ]
                    }
                  ],
                  "availability": {
                    "status": 1,
                    "isPreview": false
                  },
                  "permissions": {
                    "resourceProvider": [
                      {
                        "provider": "Microsoft.OperationalInsights/workspaces",
                        "permissionsDisplayText": "read and write permissions are required.",
                        "providerDisplayName": "Workspace",
                        "scope": "Workspace",
                        "requiredPermissions": {
                          "write": true,
                          "read": true,
                          "delete": true
                        }
                      },
                      {
                        "provider": "Microsoft.OperationalInsights/workspaces/sharedKeys",
                        "permissionsDisplayText": "read permissions to shared keys for the workspace are required. [See the documentation to learn more about workspace keys](https://docs.microsoft.com/azure/azure-monitor/platform/agent-windows#obtain-workspace-id-and-key).",
                        "providerDisplayName": "Keys",
                        "scope": "Workspace",
                        "requiredPermissions": {
                          "action": true
                        }
                      }
                    ],
                    "customs": [
                      {
                        "name": "Vectra AI Brain",
                        "description": "must be configured to export Stream metadata in JSON"
                      }
                    ]
                  },
                  "instructionSteps": [
                    {
                      "description": ">**NOTE:** This data connector depends on a parser based on a Kusto Function to work as expected **VectraStream** which is deployed with the Microsoft sentinel Solution."
                    },
                    {
                      "description": "Install the Linux agent on sperate Linux instance.\n\n> Logs are collected only from **Linux** agents.",
                      "instructions": [
                        {
                          "parameters": {
                            "title": "Choose where to install the Linux agent:",
                            "instructionSteps": [
                              {
                                "title": "Install agent on Azure Linux Virtual Machine",
                                "description": "Select the machine to install the agent on and then click **Connect**.",
                                "instructions": [
                                  {
                                    "parameters": {
                                      "linkType": "InstallAgentOnLinuxVirtualMachine"
                                    },
                                    "type": "InstallAgent"
                                  }
                                ]
                              },
                              {
                                "title": "Install agent on a non-Azure Linux Machine",
                                "description": "Download the agent on the relevant machine and follow the instructions.",
                                "instructions": [
                                  {
                                    "parameters": {
                                      "linkType": "InstallAgentOnLinuxNonAzure"
                                    },
                                    "type": "InstallAgent"
                                  }
                                ]
                              }
                            ]
                          },
                          "type": "InstructionStepsGroup"
                        }
                      ],
                      "title": "1. Install and onboard the agent for Linux"
                    },
                    {
                      "description": "Follow the configuration steps below to get Vectra Stream metadata into Microsoft sentinel. The Log Analytics agent is leveraged to send custom JSON into Azure Monitor, enabling the storage of the metadata into a custom table. For more information, refer to the [Azure Monitor Documentation](https://docs.microsoft.com/azure/azure-monitor/agents/data-sources-json).\n1. Download config file for the log analytics agent: VectraStream.conf (located in the Connector folder within the Vectra solution: https://aka.ms/sentinel-aivectrastream-conf).\n2. Login to the server where you have installed Azure Log Analytics agent.\n3. Copy VectraStream.conf to the /etc/opt/microsoft/omsagent/**workspace_id**/conf/omsagent.d/ folder.\n4. Edit VectraStream.conf as follows:\n\n\t i. configure an alternate port to send data to, if desired. Default port is 29009.\n\n\t ii. replace **workspace_id** with real value of your Workspace ID.\n5. Save changes and restart the Azure Log Analytics agent for Linux service with the following command:\n\t\tsudo /opt/microsoft/omsagent/bin/service_control restart",
                      "instructions": [
                        {
                          "parameters": {
                            "fillWith": [
                              "WorkspaceId"
                            ],
                            "label": "Workspace ID"
                          },
                          "type": "CopyableLabel"
                        }
                      ],
                      "title": "2. Configure the logs to be collected"
                    },
                    {
                      "description": "Configure Vectra AI Brain to forward Stream metadata in JSON format to your Microsoft sentinel workspace via the Log Analytics Agent.\n\nFrom the Vectra UI, navigate to Settings > Cognito Stream and Edit the destination configuration:\n\n- Select Publisher: RAW JSON\n\n- Set the server IP or hostname (which is the host which run the Log Analytics Agent)\n\n- Set all the port to **29009** (this port can be modified if required)\n\n- Save\n\n- Set Log types (Select all log types available)\n\n- Click on **Save**\n\n",
                      "title": "3. Configure and connect Vectra AI Stream"
                    }
                  ],
                  "metadata": {
                    "id": "ec069726-811c-4f50-b141-295057367f49",
                    "kind": "dataConnector",
                    "source": {
                      "kind": "solution",
                      "name": "Vectra AI"
                    },
                    "author": {
                      "name": "Vectra AI Technical Marketing"
                    },
                    "support": {
                      "tier": "developer",
                      "name": "Vectra AI",
                      "email": "tme@vectra.ai",
                      "link": "https://www.vectra.ai/support"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('DataConnector-', last(split(variables('_dataConnectorId1'),'/'))))]",
              "properties": {
                "parentId": "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectors', variables('_dataConnectorContentId1'))]",
                "contentId": "[variables('_dataConnectorContentId1')]",
                "kind": "DataConnector",
                "version": "[variables('dataConnectorVersion1')]",
                "source": {
                  "kind": "Solution",
                  "name": "Vectra AI Stream",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra AI",
                  "email": "tme@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2022-01-01-preview",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('DataConnector-', last(split(variables('_dataConnectorId1'),'/'))))]",
      "dependsOn": [
        "[variables('_dataConnectorId1')]"
      ],
      "location": "[parameters('workspace-location')]",
      "properties": {
        "parentId": "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectors', variables('_dataConnectorContentId1'))]",
        "contentId": "[variables('_dataConnectorContentId1')]",
        "kind": "DataConnector",
        "version": "[variables('dataConnectorVersion1')]",
        "source": {
          "kind": "Solution",
          "name": "Vectra AI Stream",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "Microsoft",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "Vectra AI",
          "email": "tme@vectra.ai",
          "tier": "Partner",
          "link": "https://www.vectra.ai/support"
        }
      }
    },
    {
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',variables('_dataConnectorContentId1'))]",
      "apiVersion": "2021-03-01-preview",
      "type": "Microsoft.OperationalInsights/workspaces/providers/dataConnectors",
      "location": "[parameters('workspace-location')]",
      "kind": "GenericUI",
      "properties": {
        "connectorUiConfig": {
          "title": "AI Vectra Stream",
          "publisher": "Vectra AI",
          "descriptionMarkdown": "The AI Vectra Stream connector allows to send Network Metadata colelcted by Vectra Sensors accross the Network and Cloud to Microsoft sentinel",
          "graphQueries": [
            {
              "metricName": "Total data received",
              "legend": "VectraStream_CL",
              "baseQuery": "VectraStream_CL"
            }
          ],
          "dataTypes": [
            {
              "name": "VectraStream_CL",
              "lastDataReceivedQuery": "\nVectraStream\n |  summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
            }
          ],
          "connectivityCriterias": [
            {
              "type": "IsConnectedQuery",
              "value": [
                "\nVectraStream\n| summarize LastLogReceived = max(TimeGenerated)\n| project IsConnected = LastLogReceived > ago(30d)"
              ]
            }
          ],
          "sampleQueries": [
            {
              "description": "List all DNS Queries",
              "query": "VectraStream \n| where metadata_type == \"metadat_dns\" \n| project orig_hostname, id_orig_h, resp_hostname, id_resp_h, id_resp_p, qtype_name, ['query'], answers"
            },
            {
              "description": "Number of DNS requests per type",
              "query": "VectraStream \n| where metadata_type == \"metadat_dns\" \n| summarize count() by type_name"
            },
            {
              "description": "Top 10 of query to non existing domain",
              "query": "VectraStream \n| where metadata_type == \"metadat_dns\" \n| where rcode_name == \"NXDomain\"\n| summarize Count=count() by tostring(query)\n| order by Count desc\n| limit 10"
            },
            {
              "description": "Host and Web sites using non-ephemeral Diffie-Hellman key exchange",
              "query": "VectraStream \n| where metadata_type == \"metadat_dns\" \n| where cipher contains \"TLS_RSA\"\n| distinct orig_hostname, id_orig_h, id_resp_h, server_name, cipher\n| project orig_hostname, id_orig_h, id_resp_h, server_name, cipher"
            }
          ],
          "availability": {
            "status": 1,
            "isPreview": false
          },
          "permissions": {
            "resourceProvider": [
              {
                "provider": "Microsoft.OperationalInsights/workspaces",
                "permissionsDisplayText": "read and write permissions are required.",
                "providerDisplayName": "Workspace",
                "scope": "Workspace",
                "requiredPermissions": {
                  "write": true,
                  "read": true,
                  "delete": true
                }
              },
              {
                "provider": "Microsoft.OperationalInsights/workspaces/sharedKeys",
                "permissionsDisplayText": "read permissions to shared keys for the workspace are required. [See the documentation to learn more about workspace keys](https://docs.microsoft.com/azure/azure-monitor/platform/agent-windows#obtain-workspace-id-and-key).",
                "providerDisplayName": "Keys",
                "scope": "Workspace",
                "requiredPermissions": {
                  "action": true
                }
              }
            ],
            "customs": [
              {
                "name": "Vectra AI Brain",
                "description": "must be configured to export Stream metadata in JSON"
              }
            ]
          },
          "instructionSteps": [
            {
              "description": ">**NOTE:** This data connector depends on a parser based on a Kusto Function to work as expected **VectraStream** which is deployed with the Microsoft sentinel Solution."
            },
            {
              "description": "Install the Linux agent on sperate Linux instance.\n\n> Logs are collected only from **Linux** agents.",
              "instructions": [
                {
                  "parameters": {
                    "title": "Choose where to install the Linux agent:",
                    "instructionSteps": [
                      {
                        "title": "Install agent on Azure Linux Virtual Machine",
                        "description": "Select the machine to install the agent on and then click **Connect**.",
                        "instructions": [
                          {
                            "parameters": {
                              "linkType": "InstallAgentOnLinuxVirtualMachine"
                            },
                            "type": "InstallAgent"
                          }
                        ]
                      },
                      {
                        "title": "Install agent on a non-Azure Linux Machine",
                        "description": "Download the agent on the relevant machine and follow the instructions.",
                        "instructions": [
                          {
                            "parameters": {
                              "linkType": "InstallAgentOnLinuxNonAzure"
                            },
                            "type": "InstallAgent"
                          }
                        ]
                      }
                    ]
                  },
                  "type": "InstructionStepsGroup"
                }
              ],
              "title": "1. Install and onboard the agent for Linux"
            },
            {
              "description": "Follow the configuration steps below to get Vectra Stream metadata into Microsoft sentinel. The Log Analytics agent is leveraged to send custom JSON into Azure Monitor, enabling the storage of the metadata into a custom table. For more information, refer to the [Azure Monitor Documentation](https://docs.microsoft.com/azure/azure-monitor/agents/data-sources-json).\n1. Download config file for the log analytics agent: VectraStream.conf (located in the Connector folder within the Vectra solution: https://aka.ms/sentinel-aivectrastream-conf).\n2. Login to the server where you have installed Azure Log Analytics agent.\n3. Copy VectraStream.conf to the /etc/opt/microsoft/omsagent/**workspace_id**/conf/omsagent.d/ folder.\n4. Edit VectraStream.conf as follows:\n\n\t i. configure an alternate port to send data to, if desired. Default port is 29009.\n\n\t ii. replace **workspace_id** with real value of your Workspace ID.\n5. Save changes and restart the Azure Log Analytics agent for Linux service with the following command:\n\t\tsudo /opt/microsoft/omsagent/bin/service_control restart",
              "instructions": [
                {
                  "parameters": {
                    "fillWith": [
                      "WorkspaceId"
                    ],
                    "label": "Workspace ID"
                  },
                  "type": "CopyableLabel"
                }
              ],
              "title": "2. Configure the logs to be collected"
            },
            {
              "description": "Configure Vectra AI Brain to forward Stream metadata in JSON format to your Microsoft sentinel workspace via the Log Analytics Agent.\n\nFrom the Vectra UI, navigate to Settings > Cognito Stream and Edit the destination configuration:\n\n- Select Publisher: RAW JSON\n\n- Set the server IP or hostname (which is the host which run the Log Analytics Agent)\n\n- Set all the port to **29009** (this port can be modified if required)\n\n- Save\n\n- Set Log types (Select all log types available)\n\n- Click on **Save**\n\n",
              "title": "3. Configure and connect Vectra AI Stream"
            }
          ],
          "id": "[variables('_uiConfigId1')]",
          "additionalRequirementBanner": "This data connector depends on a parser based on a Kusto Function to work as expected [**VectraStream**](https://aka.ms/sentinel-aivectrastream-parser) which is deployed with the Microsoft sentinel Solution."
        }
      }
    },
    {
      "type": "Microsoft.Resources/templateSpecs",
      "apiVersion": "2021-05-01",
      "name": "[variables('parserTemplateSpecName1')]",
      "location": "[parameters('workspace-location')]",
      "tags": {
        "hidden-sentinelWorkspaceId": "[variables('workspaceResourceId')]",
        "hidden-sentinelContentType": "Parser"
      },
      "properties": {
        "description": "VectraStream_function Data Parser with template",
        "displayName": "VectraStream_function Data Parser template"
      }
    },
    {
      "type": "Microsoft.Resources/templateSpecs/versions",
      "apiVersion": "2021-05-01",
      "name": "[concat(variables('parserTemplateSpecName1'),'/',variables('parserVersion1'))]",
      "location": "[parameters('workspace-location')]",
      "tags": {
        "hidden-sentinelWorkspaceId": "[variables('workspaceResourceId')]",
        "hidden-sentinelContentType": "Parser"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/templateSpecs', variables('parserTemplateSpecName1'))]"
      ],
      "properties": {
        "description": "VectraStream_function Data Parser with template version 2.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('parserVersion1')]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[variables('_parserName1')]",
              "apiVersion": "2020-08-01",
              "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "VectraStream_function",
                "category": "Samples",
                "functionAlias": "VectraStream_function",
                "query": "\nVectraStream_CL\r\n| extend\r\n    EventVendor=\"Vectra AI\",\r\n    EventProduct=\"Vectra Stream\",\r\n    EventEndTime=column_ifexists('ts_d', ''),\r\n    metadata_type_s = column_ifexists('metadata_type_s', ''),\r\n    community_id_s = column_ifexists('community_id_s', ''),\r\n    id_ip_ver_s = column_ifexists('id_ip_ver_s', ''),\r\n    id_orig_h_s = column_ifexists('id_orig_h_s', ''),\r\n    id_orig_p_d = column_ifexists('id_orig_p_d', ''),\r\n    id_resp_h_s = column_ifexists('id_resp_h_s', ''),\r\n    id_resp_p_d = column_ifexists('id_resp_p_d', ''),\r\n    resp_hostname_s = column_ifexists('resp_hostname_s', ''),\r\n    local_orig_b = column_ifexists('local_orig_b', ''),\r\n    local_resp_b = column_ifexists('local_resp_b', ''),\r\n    orig_huid_s = column_ifexists('orig_huid_s', ''),\r\n    orig_hostname_s = column_ifexists('orig_hostname_s', ''),\r\n    orig_sluid_s = column_ifexists('orig_sluid_s', ''),\r\n    resp_huid_s = column_ifexists('resp_huid_s', ''),\r\n    resp_sluid_s = column_ifexists('resp_sluid_s', ''),\r\n    sensor_uid_s = column_ifexists('sensor_uid_s', ''),\r\n    uid_s = column_ifexists('uid_s', ''),\r\n    ts_d = column_ifexists('ts_d', ''),\r\n    error_s = column_ifexists('error_s', ''),\r\n\tconn_state_s = column_ifexists('conn_state_s', ''),\r\n    duration_d = column_ifexists('duration_d', ''),\r\n    service_s = column_ifexists('service_s', ''),\r\n    proto_d = column_ifexists('proto_d', ''),\r\n    protoName_s = column_ifexists('protoName_s', ''),\r\n    orig_ip_bytes_d = column_ifexists('orig_ip_bytes_d', ''),\r\n    resp_ip_bytes_d = column_ifexists('resp_ip_bytes_d', ''),\r\n    orig_pkts_d = column_ifexists('orig_pkts_d', ''),\r\n    resp_pkts_d = column_ifexists('resp_pkts_d', ''),\r\n    session_start_time_d = column_ifexists('session_start_time_d', ''),\r\n    resp_domain_s = column_ifexists('resp_domain_s', ''),\r\n    orig_vlan_id_d = column_ifexists('orig_vlan_id_d', ''),\r\n    resp_vlan_id_d = column_ifexists('resp_vlan_id_d', ''),\r\n    first_orig_resp_data_pkt_s = column_ifexists('first_orig_resp_data_pkt_s', ''),\r\n    first_resp_orig_data_pkt_s = column_ifexists('first_resp_orig_data_pkt_s', ''),\r\n    first_orig_resp_data_pkt_time_d = column_ifexists('first_orig_resp_data_pkt_time_d', ''),\r\n    first_resp_orig_data_pkt_time_d = column_ifexists('first_resp_orig_data_pkt_time_d', ''),\r\n    first_orig_resp_pkt_time_d = column_ifexists('first_orig_resp_pkt_time_d', ''),\r\n    first_resp_orig_pkt_time_d = column_ifexists('first_resp_orig_pkt_time_d', ''),\r\n    resp_multihomed_b = column_ifexists('resp_multihomed_b', ''),\r\n    //beacon specific attributes\r\n\tbeacon_type_s = column_ifexists('beacon_type_s', ''),\r\n    beacon_uid_s = column_ifexists('beacon_uid_s', ''),\r\n    first_event_time_d = column_ifexists('first_event_time_d', ''),\r\n    last_event_time_d = column_ifexists('last_event_time_d', ''),\r\n    resp_domains_s = column_ifexists('resp_domains_s', ''),\r\n    session_count_d = column_ifexists('session_count_d', ''),\r\n    //dcerpc\r\n\trtt_s = column_ifexists('rtt_s', ''),\r\n    endpoint_s = column_ifexists('endpoint_s', ''),\r\n    username_s = column_ifexists('username_s', ''),\r\n    hostname_s = column_ifexists('hostname_s', ''),\r\n    domain_s = column_ifexists('domain_s', ''),\r\n    operation_s = column_ifexists('operation_s', ''),\r\n\t//dhcp\r\n    mac_s = column_ifexists('mac_s', ''),\r\n    assigned_ip_s = column_ifexists('assigned_ip_s', ''),\r\n    lease_time_d = column_ifexists('lease_time_d', ''),\r\n    trans_id_s = column_ifexists('trans_id_s', ''),\r\n    dhcp_server_ip_s = column_ifexists('dhcp_server_ip_s', ''),\r\n    dns_server_ips_s = column_ifexists('dns_server_ips_s', ''),\r\n\t//dns\r\n    trans_id_d = column_ifexists('trans_id_d', ''),\r\n    query_s = column_ifexists('query_s', ''),\r\n    qclass_d = column_ifexists('qclass_d', ''),\r\n    qclass_name_s = column_ifexists('qclass_name_s', ''),\r\n    qtype_d = column_ifexists('qtype_d', ''),\r\n    qtype_name_s = column_ifexists('qtype_name_s', ''),\r\n    rcode_d = column_ifexists('rcode_d', ''),\r\n    rcode_name_s = column_ifexists('rcode_name_s', ''),\r\n    AA_b = column_ifexists('AA_b', ''),\r\n    TC_b = column_ifexists('TC_b', ''),\r\n    RD_b = column_ifexists('RD_b', ''),\r\n    RA_b = column_ifexists('RA_b', ''),\r\n    answers_s = column_ifexists('answers_s', ''),\r\n    TTLs_s = column_ifexists('TTLs_s', ''),\r\n    auth_s = column_ifexists('auth_s', ''),\r\n    total_answers_d = column_ifexists('total_answers_d', ''),\r\n    total_replies_d = column_ifexists('total_replies_d', ''),\r\n    rejected_b = column_ifexists('rejected_b', ''),\r\n    saw_query_b = column_ifexists('saw_query_b', ''),\r\n    saw_reply_b = column_ifexists('saw_reply_b', ''),\r\n    values_s = column_ifexists('values_s', ''),\r\n\t//http\r\n    method_s = column_ifexists('method_s', ''),\r\n    host_s = column_ifexists('host_s', ''),\r\n    uri_s = column_ifexists('uri_s', ''),\r\n    referrer_s = column_ifexists('referrer_s', ''),\r\n    user_agent_s = column_ifexists('user_agent_s', ''),\r\n    request_body_len_d = column_ifexists('request_body_len_d', ''),\r\n    response_body_len_d = column_ifexists('response_body_len_d', ''),\r\n    orig_mime_types_s = column_ifexists('orig_mime_types_s', ''),\r\n    resp_mime_types_s = column_ifexists('resp_mime_types_s', ''),\r\n    status_code_d = column_ifexists('status_code_d', ''),\r\n    status_msg_s = column_ifexists('status_msg_s', ''),\r\n    proxied_s = column_ifexists('proxied_s', ''),\r\n    cookie_s = column_ifexists('cookie_s', ''),\r\n    cookie_vars_s = column_ifexists('cookie_vars_s', ''),\r\n    request_cache_control_s = column_ifexists('request_cache_control_s', ''),\r\n    response_cache_control_s = column_ifexists('response_cache_control_s', ''),\r\n    response_expires_s = column_ifexists('response_expires_s', ''),\r\n    request_header_count_d = column_ifexists('request_header_count_d', ''),\r\n    response_header_count_d = column_ifexists('response_header_count_d', ''),\r\n    is_proxied_b = column_ifexists('is_proxied_b', ''),\r\n    host_multihomed_s = column_ifexists('host_multihomed_s', ''),\r\n\t//Kerberos\r\n    client_s = column_ifexists('client_s', ''),\r\n    data_source_s = column_ifexists('data_source_s', ''),\r\n    success_b = column_ifexists('success_b', ''),\r\n    error_code_s = column_ifexists('error_code_s', ''),\r\n    error_msg_s = column_ifexists('error_msg_s', ''),\r\n    request_type_s = column_ifexists('request_type_s', ''),\r\n    protocol_s = column_ifexists('protocol_s', ''),\r\n    reply_timestamp_d = column_ifexists('reply_timestamp_d', ''),\r\n    orig_host_observed_privilege_d = column_ifexists('orig_host_observed_privilege_d', ''),\r\n    req_ciphers_s = column_ifexists('req_ciphers_s', ''),\r\n    rep_cipher_s = column_ifexists('rep_cipher_s', ''),\r\n    //ldap\r\n    message_id_d = column_ifexists('message_id_d', ''),\r\n    base_object_s = column_ifexists('base_object_s', ''),\r\n    query_scope_s = column_ifexists('query_scope_s', ''),\r\n    result_s = column_ifexists('result_s', ''),\r\n    matched_dn_s = column_ifexists('matched_dn_s', ''),\r\n    duration_s = column_ifexists('duration_s', ''),\r\n    attributes_s = column_ifexists('attributes_s', ''),\r\n    bind_error_count_d = column_ifexists('bind_error_count_d', ''),\r\n    encrypted_sasl_payload_count_d = column_ifexists('encrypted_sasl_payload_count_d', ''),\r\n    logon_failure_error_count_s = column_ifexists('logon_failure_error_count_s', ''),\r\n    response_bytes_s = column_ifexists('response_bytes_s', ''),\r\n    request_bytes_s = column_ifexists('request_bytes_s', ''),\r\n    result_code_s = column_ifexists('result_code_s', ''),\r\n    result_count_d = column_ifexists('result_count_d', ''),\r\n    is_query_b = column_ifexists('is_query_b', ''),\r\n    is_close_b = column_ifexists('is_close_b', ''),\r\n\t//ntlm\r\n    status_d = column_ifexists('status_d', ''),\r\n\t//rdp\r\n    keyboard_layout_s = column_ifexists('keyboard_layout_s', ''),\r\n    client_build_d = column_ifexists('client_build_d', ''),\r\n    client_dig_protocol_id_d = column_ifexists('client_dig_protocol_id_d', ''),\r\n    client_dig_product_id_d = column_ifexists('client_dig_product_id_d', ''),\r\n    client_name_s = column_ifexists('client_name_s', ''),\r\n    desktop_width_d = column_ifexists('desktop_width_d', ''),\r\n    desktop_height_d = column_ifexists('desktop_height_d', ''),\r\n\t//smbfiles\r\n    action_s = column_ifexists('action_s', ''),\r\n    delete_on_close_b = column_ifexists('delete_on_close_b', ''),\r\n    path_s = column_ifexists('path_s', ''),\r\n    name_s = column_ifexists('name_s', ''),\r\n    prev_name_s = column_ifexists('prev_name_s', ''),\r\n    version_s = column_ifexists('version_s', ''),\r\n\t//smtp\r\n    helo_s = column_ifexists('helo_s', ''),\r\n    mail_from_s = column_ifexists('mail_from_s', ''),\r\n    rcpt_to_s = column_ifexists('rcpt_to_s', ''),\r\n    date_d = column_ifexists('date_d', ''),\r\n    from_s = column_ifexists('from_s', ''),\r\n    to_s = column_ifexists('to_s', ''),\r\n    cc_s = column_ifexists('cc_s', ''),\r\n    reply_to_s = column_ifexists('reply_to_s', ''),\r\n    msgid_d = column_ifexists('msgid_d', ''),\r\n    in_reply_to_s = column_ifexists('in_reply_to_s', ''),\r\n    subject_s = column_ifexists('subject_s', ''),\r\n    x_originating_ip_s = column_ifexists('x_originating_ip_s', ''),\r\n    first_received_s = column_ifexists('first_received_s', ''),\r\n    second_received_s = column_ifexists('second_received_s', ''),\r\n    useragent_s = column_ifexists('useragent_s', ''),\r\n    tls_s = column_ifexists('tls_s', ''),\r\n    spf_helo_s = column_ifexists('spf_helo_s', ''),\r\n    spf_mailfrom_s = column_ifexists('spf_mailfrom_s', ''),\r\n    dkim_status_s = column_ifexists('dkim_status_s', ''),\r\n    dmarc_status_s = column_ifexists('dmarc_status_s', ''),\r\n\t//ssh\r\n    server_s = column_ifexists('server_s', ''),\r\n    cipher_alg_s = column_ifexists('cipher_alg_s', ''),\r\n    mac_alg_s = column_ifexists('mac_alg_s', ''),\r\n    compression_alg_s = column_ifexists('compression_alg_s', ''),\r\n    kex_alg_s = column_ifexists('kex_alg_s', ''),\r\n    host_key_alg_s = column_ifexists('host_key_alg_s', ''),\r\n    host_key_s = column_ifexists('host_key_s', ''),\r\n    hassh_g = column_ifexists('hassh_g', ''),\r\n    hasshServer_g = column_ifexists('hasshServer_g', ''),\r\n\t//ssl\r\n    server_name_s = column_ifexists('server_name_s', ''),\r\n    established_b = column_ifexists('established_b', ''),\r\n    next_protocol_s = column_ifexists('next_protocol_s', ''),\r\n    cipher_s = column_ifexists('cipher_s', ''),\r\n    version_num_d = column_ifexists('version_num_d', ''),\r\n    curve_s = column_ifexists('curve_s', ''),\r\n    issuer_s = column_ifexists('issuer_s', ''),\r\n    client_issuer_s = column_ifexists('client_issuer_s', ''),\r\n    client_subject_s = column_ifexists('client_subject_s', ''),\r\n    client_version_num_d = column_ifexists('client_version_num_d', ''),\r\n    client_version_s = column_ifexists('client_version_s', ''),\r\n    client_extension_s = column_ifexists('client_extension_s', ''),\r\n    client_ec_point_format_s = column_ifexists('client_ec_point_format_s', ''),\r\n    client_curve_num_s = column_ifexists('client_curve_num_s', ''),\r\n    ja3_g = column_ifexists('ja3_g', ''),\r\n    ja3s_g = column_ifexists('ja3s_g', ''),\r\n    server_extensions_s = column_ifexists('server_extensions_s', ''),\r\n\t//x509\r\n    certificate_version_d = column_ifexists('certificate_version_d', ''),\r\n    certificate_serial_s = column_ifexists('certificate_serial_s', ''),\r\n    certificate_subject_s = column_ifexists('certificate_subject_s', ''),\r\n    certificate_issuer_s = column_ifexists('certificate_issuer_s', ''),\r\n    certificate_key_alg_s = column_ifexists('certificate_key_alg_s', ''),\r\n    certificate_key_length_s = column_ifexists('certificate_key_length_s', ''),\r\n    certificate_key_type_s = column_ifexists('certificate_key_type_s', ''),\r\n    certificate_not_valid_after_d = column_ifexists('certificate_not_valid_after_d', ''),\r\n    certificate_not_valid_before_d = column_ifexists('certificate_not_valid_before_d', ''),\r\n    certificate_exponent_s = column_ifexists('certificate_exponent_s', ''),\r\n    certificate_sig_alg_s = column_ifexists('certificate_sig_alg_s', ''),\r\n    certificate_self_issued_b = column_ifexists('certificate_self_issued_b', ''),\r\n    certificate_curve_s = column_ifexists('certificate_curve_s', ''),\r\n    certificate_cn_s = column_ifexists('certificate_cn_s', ''),\r\n    san_dns_s = column_ifexists('san_dns_s', ''),\r\n    san_email_s = column_ifexists('san_email_s', ''),\r\n    san_ip_s = column_ifexists('san_ip_s', ''),\r\n    san_other_fields_b = column_ifexists('san_other_fields_b', ''),\r\n    basic_constraints_b = column_ifexists('basic_constraints_b', '')\r\n| project-rename\r\n    metadata_type = metadata_type_s,\r\n    community_id = community_id_s,\r\n    id_ip_ver = id_ip_ver_s,\r\n    id_orig_h = id_orig_h_s,\r\n    id_orig_p = id_orig_p_d,\r\n    id_resp_h = id_resp_h_s,\r\n    id_resp_p = id_resp_p_d,\r\n    resp_hostname = resp_hostname_s,\r\n    local_orig = local_orig_b,\r\n    local_resp = local_resp_b,\r\n    orig_huid = orig_huid_s,\r\n    orig_hostname = orig_hostname_s,\r\n    orig_sluid = orig_sluid_s,\r\n    resp_huid = resp_huid_s,\r\n    resp_sluid = resp_sluid_s,\r\n    sensor_uid = sensor_uid_s,\r\n    uid = uid_s,\r\n    ts = ts_d,\r\n    error = error_s,\r\n\tconn_state = conn_state_s,\r\n    duration = duration_d,\r\n    service = service_s,\r\n    proto = proto_d,\r\n    protoName = protoName_s,\r\n    orig_ip_bytes = orig_ip_bytes_d,\r\n    resp_ip_bytes = resp_ip_bytes_d,\r\n    orig_pkts = orig_pkts_d,\r\n    resp_pkts = resp_pkts_d,\r\n    session_start_time = session_start_time_d,\r\n    resp_domain = resp_domain_s,\r\n    orig_vlan_id = orig_vlan_id_d,\r\n    resp_vlan_id = resp_vlan_id_d,\r\n    first_orig_resp_data_pkt = first_orig_resp_data_pkt_s,\r\n    first_resp_orig_data_pkt = first_resp_orig_data_pkt_s,\r\n    first_orig_resp_data_pkt_time = first_orig_resp_data_pkt_time_d,\r\n    first_resp_orig_data_pkt_time = first_resp_orig_data_pkt_time_d,\r\n    first_orig_resp_pkt_time = first_orig_resp_pkt_time_d,\r\n    first_resp_orig_pkt_time = first_resp_orig_pkt_time_d,\r\n    resp_multihomed = resp_multihomed_b,\r\n    //beacon specific attributes\r\n\tbeacon_type = beacon_type_s,\r\n    beacon_uid = beacon_uid_s,\r\n    first_event_time = first_event_time_d,\r\n    last_event_time = last_event_time_d,\r\n    resp_domains = resp_domains_s,\r\n    session_count = session_count_d,\r\n    //dcerpc\r\n\trtt = rtt_s,\r\n    endpoint = endpoint_s,\r\n    username = username_s,\r\n    hostname = hostname_s,\r\n    domain = domain_s,\r\n    operation = operation_s,\r\n\t//dhcp\r\n    mac = mac_s,\r\n    assigned_ip = assigned_ip_s,\r\n    lease_time = lease_time_d,\r\n    dhcp_server_ip = dhcp_server_ip_s,\r\n    dns_server_ips = dns_server_ips_s,\r\n\t//dns\r\n    trans_id = trans_id_d,\r\n    query = query_s,\r\n    qclass = qclass_d,\r\n    qclass_name = qclass_name_s,\r\n    qtype = qtype_d,\r\n    qtype_name = qtype_name_s,\r\n    rcode = rcode_d,\r\n    rcode_name = rcode_name_s,\r\n    AA = AA_b,\r\n    TC = TC_b,\r\n    RD = RD_b,\r\n    RA = RA_b,\r\n    answers = answers_s,\r\n    TTLs = TTLs_s,\r\n    auth = auth_s,\r\n    total_answers = total_answers_d,\r\n    total_replies = total_replies_d,\r\n    rejected = rejected_b,\r\n    saw_query = saw_query_b,\r\n    saw_reply = saw_reply_b,\r\n    values = values_s,\r\n\t//http\r\n    method = method_s,\r\n    host = host_s,\r\n    uri = uri_s,\r\n    referrer = referrer_s,\r\n    user_agent = user_agent_s,\r\n    request_body_len = request_body_len_d,\r\n    response_body_len = response_body_len_d,\r\n    orig_mime_types = orig_mime_types_s,\r\n    resp_mime_types = resp_mime_types_s,\r\n    status_code = status_code_d,\r\n    status_msg = status_msg_s,\r\n    proxied = proxied_s,\r\n    cookie = cookie_s,\r\n    cookie_vars = cookie_vars_s,\r\n    request_cache_control = request_cache_control_s,\r\n    response_cache_control = response_cache_control_s,\r\n    response_expires = response_expires_s,\r\n    request_header_count = request_header_count_d,\r\n    response_header_count = response_header_count_d,\r\n    is_proxied = is_proxied_b,\r\n    host_multihomed = host_multihomed_s,\r\n\t//Kerberos\r\n    client = client_s,\r\n    data_source = data_source_s,\r\n    success = success_b,\r\n    error_code = error_code_s,\r\n    error_msg = error_msg_s,\r\n    request_type = request_type_s,\r\n    protocol = protocol_s,\r\n    reply_timestamp = reply_timestamp_d,\r\n    orig_host_observed_privilege = orig_host_observed_privilege_d,\r\n    req_ciphers = req_ciphers_s,\r\n    rep_cipher = rep_cipher_s,\r\n    //ldap\r\n    message_id = message_id_d,\r\n    base_object = base_object_s,\r\n    query_scope = query_scope_s,\r\n    result = result_s,\r\n    matched_dn = matched_dn_s,\r\n    duration_s = duration_s,\r\n    attributes = attributes_s,\r\n    bind_error_count = bind_error_count_d,\r\n    encrypted_sasl_payload_count = encrypted_sasl_payload_count_d,\r\n    logon_failure_error_count = logon_failure_error_count_s,\r\n    response_bytes = response_bytes_s,\r\n    request_bytes = request_bytes_s,\r\n    result_code = result_code_s,\r\n    result_count = result_count_d,\r\n    is_query = is_query_b,\r\n    is_close = is_close_b,\r\n\t//ntlm\r\n    status = status_d,\r\n\t//rdp\r\n    keyboard_layout = keyboard_layout_s,\r\n    client_build = client_build_d,\r\n    client_dig_protocol_id = client_dig_protocol_id_d,\r\n    client_dig_product_id = client_dig_product_id_d,\r\n    client_name = client_name_s,\r\n    desktop_width = desktop_width_d,\r\n    desktop_height = desktop_height_d,\r\n\t//smbfiles\r\n    action = action_s,\r\n    delete_on_close = delete_on_close_b,\r\n    path = path_s,\r\n    name = name_s,\r\n    prev_name = prev_name_s,\r\n    version = version_s,\r\n\t//smtp\r\n    helo = helo_s,\r\n    mail_from = mail_from_s,\r\n    rcpt_to = rcpt_to_s,\r\n    date_msg = date_d,\r\n    from = from_s,\r\n    to_msg = to_s,\r\n    cc = cc_s,\r\n    reply_to = reply_to_s,\r\n    msgid = msgid_d,\r\n    in_reply_to = in_reply_to_s,\r\n    subject = subject_s,\r\n    x_originating_ip = x_originating_ip_s,\r\n    first_received = first_received_s,\r\n    second_received = second_received_s,\r\n    useragent = useragent_s,\r\n    tls = tls_s,\r\n    spf_helo = spf_helo_s,\r\n    spf_mailfrom = spf_mailfrom_s,\r\n    dkim_status = dkim_status_s,\r\n    dmarc_status = dmarc_status_s,\r\n\t//ssh\r\n    server = server_s,\r\n    cipher_alg = cipher_alg_s,\r\n    mac_alg = mac_alg_s,\r\n    compression_alg = compression_alg_s,\r\n    kex_alg = kex_alg_s,\r\n    host_key_alg = host_key_alg_s,\r\n    host_key = host_key_s,\r\n    hassh = hassh_g,\r\n    hasshServer = hasshServer_g,\r\n\t//ssl\r\n    server_name = server_name_s,\r\n    established = established_b,\r\n    next_protocol = next_protocol_s,\r\n    cipher = cipher_s,\r\n    version_num = version_num_d,\r\n    curve = curve_s,\r\n    issuer = issuer_s,\r\n    client_issuer = client_issuer_s,\r\n    client_subject = client_subject_s,\r\n    client_version_num = client_version_num_d,\r\n    client_version = client_version_s,\r\n    client_extension = client_extension_s,\r\n    client_ec_point_format = client_ec_point_format_s,\r\n    client_curve_num = client_curve_num_s,\r\n    ja3 = ja3_g,\r\n    ja3s = ja3s_g,\r\n    server_extensions = server_extensions_s,\r\n\t//x509\r\n    certificate_version = certificate_version_d,\r\n    certificate_serial = certificate_serial_s,\r\n    certificate_subject = certificate_subject_s,\r\n    certificate_issuer = certificate_issuer_s,\r\n    certificate_key_alg = certificate_key_alg_s,\r\n    certificate_key_length = certificate_key_length_s,\r\n    certificate_key_type = certificate_key_type_s,\r\n    certificate_not_valid_after = certificate_not_valid_after_d,\r\n    certificate_not_valid_before = certificate_not_valid_before_d,\r\n    certificate_exponent = certificate_exponent_s,\r\n    certificate_sig_alg = certificate_sig_alg_s,\r\n    certificate_self_issued = certificate_self_issued_b,\r\n    certificate_curve = certificate_curve_s,\r\n    certificate_cn = certificate_cn_s,\r\n    san_dns = san_dns_s,\r\n    san_email = san_email_s,\r\n    san_ip = san_ip_s,\r\n    san_other_fields = san_other_fields_b,\r\n    basic_constraints = basic_constraints_b",
                "version": 1,
                "tags": [
                  {
                    "name": "description",
                    "value": "VectraStream_function"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('_parserId1'),'/'))))]",
              "dependsOn": [
                "[variables('_parserName1')]"
              ],
              "properties": {
                "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), variables('parserName1'))]",
                "contentId": "[variables('_parserContentId1')]",
                "kind": "Parser",
                "version": "[variables('parserVersion1')]",
                "source": {
                  "name": "Vectra AI Stream",
                  "kind": "Solution",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra AI",
                  "email": "tme@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2021-06-01",
      "name": "[variables('_parserName1')]",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "eTag": "*",
        "displayName": "VectraStream_function",
        "category": "Samples",
        "functionAlias": "VectraStream_function",
        "query": "\nVectraStream_CL\r\n| extend\r\n    EventVendor=\"Vectra AI\",\r\n    EventProduct=\"Vectra Stream\",\r\n    EventEndTime=column_ifexists('ts_d', ''),\r\n    metadata_type_s = column_ifexists('metadata_type_s', ''),\r\n    community_id_s = column_ifexists('community_id_s', ''),\r\n    id_ip_ver_s = column_ifexists('id_ip_ver_s', ''),\r\n    id_orig_h_s = column_ifexists('id_orig_h_s', ''),\r\n    id_orig_p_d = column_ifexists('id_orig_p_d', ''),\r\n    id_resp_h_s = column_ifexists('id_resp_h_s', ''),\r\n    id_resp_p_d = column_ifexists('id_resp_p_d', ''),\r\n    resp_hostname_s = column_ifexists('resp_hostname_s', ''),\r\n    local_orig_b = column_ifexists('local_orig_b', ''),\r\n    local_resp_b = column_ifexists('local_resp_b', ''),\r\n    orig_huid_s = column_ifexists('orig_huid_s', ''),\r\n    orig_hostname_s = column_ifexists('orig_hostname_s', ''),\r\n    orig_sluid_s = column_ifexists('orig_sluid_s', ''),\r\n    resp_huid_s = column_ifexists('resp_huid_s', ''),\r\n    resp_sluid_s = column_ifexists('resp_sluid_s', ''),\r\n    sensor_uid_s = column_ifexists('sensor_uid_s', ''),\r\n    uid_s = column_ifexists('uid_s', ''),\r\n    ts_d = column_ifexists('ts_d', ''),\r\n    error_s = column_ifexists('error_s', ''),\r\n\tconn_state_s = column_ifexists('conn_state_s', ''),\r\n    duration_d = column_ifexists('duration_d', ''),\r\n    service_s = column_ifexists('service_s', ''),\r\n    proto_d = column_ifexists('proto_d', ''),\r\n    protoName_s = column_ifexists('protoName_s', ''),\r\n    orig_ip_bytes_d = column_ifexists('orig_ip_bytes_d', ''),\r\n    resp_ip_bytes_d = column_ifexists('resp_ip_bytes_d', ''),\r\n    orig_pkts_d = column_ifexists('orig_pkts_d', ''),\r\n    resp_pkts_d = column_ifexists('resp_pkts_d', ''),\r\n    session_start_time_d = column_ifexists('session_start_time_d', ''),\r\n    resp_domain_s = column_ifexists('resp_domain_s', ''),\r\n    orig_vlan_id_d = column_ifexists('orig_vlan_id_d', ''),\r\n    resp_vlan_id_d = column_ifexists('resp_vlan_id_d', ''),\r\n    first_orig_resp_data_pkt_s = column_ifexists('first_orig_resp_data_pkt_s', ''),\r\n    first_resp_orig_data_pkt_s = column_ifexists('first_resp_orig_data_pkt_s', ''),\r\n    first_orig_resp_data_pkt_time_d = column_ifexists('first_orig_resp_data_pkt_time_d', ''),\r\n    first_resp_orig_data_pkt_time_d = column_ifexists('first_resp_orig_data_pkt_time_d', ''),\r\n    first_orig_resp_pkt_time_d = column_ifexists('first_orig_resp_pkt_time_d', ''),\r\n    first_resp_orig_pkt_time_d = column_ifexists('first_resp_orig_pkt_time_d', ''),\r\n    resp_multihomed_b = column_ifexists('resp_multihomed_b', ''),\r\n    //beacon specific attributes\r\n\tbeacon_type_s = column_ifexists('beacon_type_s', ''),\r\n    beacon_uid_s = column_ifexists('beacon_uid_s', ''),\r\n    first_event_time_d = column_ifexists('first_event_time_d', ''),\r\n    last_event_time_d = column_ifexists('last_event_time_d', ''),\r\n    resp_domains_s = column_ifexists('resp_domains_s', ''),\r\n    session_count_d = column_ifexists('session_count_d', ''),\r\n    //dcerpc\r\n\trtt_s = column_ifexists('rtt_s', ''),\r\n    endpoint_s = column_ifexists('endpoint_s', ''),\r\n    username_s = column_ifexists('username_s', ''),\r\n    hostname_s = column_ifexists('hostname_s', ''),\r\n    domain_s = column_ifexists('domain_s', ''),\r\n    operation_s = column_ifexists('operation_s', ''),\r\n\t//dhcp\r\n    mac_s = column_ifexists('mac_s', ''),\r\n    assigned_ip_s = column_ifexists('assigned_ip_s', ''),\r\n    lease_time_d = column_ifexists('lease_time_d', ''),\r\n    trans_id_s = column_ifexists('trans_id_s', ''),\r\n    dhcp_server_ip_s = column_ifexists('dhcp_server_ip_s', ''),\r\n    dns_server_ips_s = column_ifexists('dns_server_ips_s', ''),\r\n\t//dns\r\n    trans_id_d = column_ifexists('trans_id_d', ''),\r\n    query_s = column_ifexists('query_s', ''),\r\n    qclass_d = column_ifexists('qclass_d', ''),\r\n    qclass_name_s = column_ifexists('qclass_name_s', ''),\r\n    qtype_d = column_ifexists('qtype_d', ''),\r\n    qtype_name_s = column_ifexists('qtype_name_s', ''),\r\n    rcode_d = column_ifexists('rcode_d', ''),\r\n    rcode_name_s = column_ifexists('rcode_name_s', ''),\r\n    AA_b = column_ifexists('AA_b', ''),\r\n    TC_b = column_ifexists('TC_b', ''),\r\n    RD_b = column_ifexists('RD_b', ''),\r\n    RA_b = column_ifexists('RA_b', ''),\r\n    answers_s = column_ifexists('answers_s', ''),\r\n    TTLs_s = column_ifexists('TTLs_s', ''),\r\n    auth_s = column_ifexists('auth_s', ''),\r\n    total_answers_d = column_ifexists('total_answers_d', ''),\r\n    total_replies_d = column_ifexists('total_replies_d', ''),\r\n    rejected_b = column_ifexists('rejected_b', ''),\r\n    saw_query_b = column_ifexists('saw_query_b', ''),\r\n    saw_reply_b = column_ifexists('saw_reply_b', ''),\r\n    values_s = column_ifexists('values_s', ''),\r\n\t//http\r\n    method_s = column_ifexists('method_s', ''),\r\n    host_s = column_ifexists('host_s', ''),\r\n    uri_s = column_ifexists('uri_s', ''),\r\n    referrer_s = column_ifexists('referrer_s', ''),\r\n    user_agent_s = column_ifexists('user_agent_s', ''),\r\n    request_body_len_d = column_ifexists('request_body_len_d', ''),\r\n    response_body_len_d = column_ifexists('response_body_len_d', ''),\r\n    orig_mime_types_s = column_ifexists('orig_mime_types_s', ''),\r\n    resp_mime_types_s = column_ifexists('resp_mime_types_s', ''),\r\n    status_code_d = column_ifexists('status_code_d', ''),\r\n    status_msg_s = column_ifexists('status_msg_s', ''),\r\n    proxied_s = column_ifexists('proxied_s', ''),\r\n    cookie_s = column_ifexists('cookie_s', ''),\r\n    cookie_vars_s = column_ifexists('cookie_vars_s', ''),\r\n    request_cache_control_s = column_ifexists('request_cache_control_s', ''),\r\n    response_cache_control_s = column_ifexists('response_cache_control_s', ''),\r\n    response_expires_s = column_ifexists('response_expires_s', ''),\r\n    request_header_count_d = column_ifexists('request_header_count_d', ''),\r\n    response_header_count_d = column_ifexists('response_header_count_d', ''),\r\n    is_proxied_b = column_ifexists('is_proxied_b', ''),\r\n    host_multihomed_s = column_ifexists('host_multihomed_s', ''),\r\n\t//Kerberos\r\n    client_s = column_ifexists('client_s', ''),\r\n    data_source_s = column_ifexists('data_source_s', ''),\r\n    success_b = column_ifexists('success_b', ''),\r\n    error_code_s = column_ifexists('error_code_s', ''),\r\n    error_msg_s = column_ifexists('error_msg_s', ''),\r\n    request_type_s = column_ifexists('request_type_s', ''),\r\n    protocol_s = column_ifexists('protocol_s', ''),\r\n    reply_timestamp_d = column_ifexists('reply_timestamp_d', ''),\r\n    orig_host_observed_privilege_d = column_ifexists('orig_host_observed_privilege_d', ''),\r\n    req_ciphers_s = column_ifexists('req_ciphers_s', ''),\r\n    rep_cipher_s = column_ifexists('rep_cipher_s', ''),\r\n    //ldap\r\n    message_id_d = column_ifexists('message_id_d', ''),\r\n    base_object_s = column_ifexists('base_object_s', ''),\r\n    query_scope_s = column_ifexists('query_scope_s', ''),\r\n    result_s = column_ifexists('result_s', ''),\r\n    matched_dn_s = column_ifexists('matched_dn_s', ''),\r\n    duration_s = column_ifexists('duration_s', ''),\r\n    attributes_s = column_ifexists('attributes_s', ''),\r\n    bind_error_count_d = column_ifexists('bind_error_count_d', ''),\r\n    encrypted_sasl_payload_count_d = column_ifexists('encrypted_sasl_payload_count_d', ''),\r\n    logon_failure_error_count_s = column_ifexists('logon_failure_error_count_s', ''),\r\n    response_bytes_s = column_ifexists('response_bytes_s', ''),\r\n    request_bytes_s = column_ifexists('request_bytes_s', ''),\r\n    result_code_s = column_ifexists('result_code_s', ''),\r\n    result_count_d = column_ifexists('result_count_d', ''),\r\n    is_query_b = column_ifexists('is_query_b', ''),\r\n    is_close_b = column_ifexists('is_close_b', ''),\r\n\t//ntlm\r\n    status_d = column_ifexists('status_d', ''),\r\n\t//rdp\r\n    keyboard_layout_s = column_ifexists('keyboard_layout_s', ''),\r\n    client_build_d = column_ifexists('client_build_d', ''),\r\n    client_dig_protocol_id_d = column_ifexists('client_dig_protocol_id_d', ''),\r\n    client_dig_product_id_d = column_ifexists('client_dig_product_id_d', ''),\r\n    client_name_s = column_ifexists('client_name_s', ''),\r\n    desktop_width_d = column_ifexists('desktop_width_d', ''),\r\n    desktop_height_d = column_ifexists('desktop_height_d', ''),\r\n\t//smbfiles\r\n    action_s = column_ifexists('action_s', ''),\r\n    delete_on_close_b = column_ifexists('delete_on_close_b', ''),\r\n    path_s = column_ifexists('path_s', ''),\r\n    name_s = column_ifexists('name_s', ''),\r\n    prev_name_s = column_ifexists('prev_name_s', ''),\r\n    version_s = column_ifexists('version_s', ''),\r\n\t//smtp\r\n    helo_s = column_ifexists('helo_s', ''),\r\n    mail_from_s = column_ifexists('mail_from_s', ''),\r\n    rcpt_to_s = column_ifexists('rcpt_to_s', ''),\r\n    date_d = column_ifexists('date_d', ''),\r\n    from_s = column_ifexists('from_s', ''),\r\n    to_s = column_ifexists('to_s', ''),\r\n    cc_s = column_ifexists('cc_s', ''),\r\n    reply_to_s = column_ifexists('reply_to_s', ''),\r\n    msgid_d = column_ifexists('msgid_d', ''),\r\n    in_reply_to_s = column_ifexists('in_reply_to_s', ''),\r\n    subject_s = column_ifexists('subject_s', ''),\r\n    x_originating_ip_s = column_ifexists('x_originating_ip_s', ''),\r\n    first_received_s = column_ifexists('first_received_s', ''),\r\n    second_received_s = column_ifexists('second_received_s', ''),\r\n    useragent_s = column_ifexists('useragent_s', ''),\r\n    tls_s = column_ifexists('tls_s', ''),\r\n    spf_helo_s = column_ifexists('spf_helo_s', ''),\r\n    spf_mailfrom_s = column_ifexists('spf_mailfrom_s', ''),\r\n    dkim_status_s = column_ifexists('dkim_status_s', ''),\r\n    dmarc_status_s = column_ifexists('dmarc_status_s', ''),\r\n\t//ssh\r\n    server_s = column_ifexists('server_s', ''),\r\n    cipher_alg_s = column_ifexists('cipher_alg_s', ''),\r\n    mac_alg_s = column_ifexists('mac_alg_s', ''),\r\n    compression_alg_s = column_ifexists('compression_alg_s', ''),\r\n    kex_alg_s = column_ifexists('kex_alg_s', ''),\r\n    host_key_alg_s = column_ifexists('host_key_alg_s', ''),\r\n    host_key_s = column_ifexists('host_key_s', ''),\r\n    hassh_g = column_ifexists('hassh_g', ''),\r\n    hasshServer_g = column_ifexists('hasshServer_g', ''),\r\n\t//ssl\r\n    server_name_s = column_ifexists('server_name_s', ''),\r\n    established_b = column_ifexists('established_b', ''),\r\n    next_protocol_s = column_ifexists('next_protocol_s', ''),\r\n    cipher_s = column_ifexists('cipher_s', ''),\r\n    version_num_d = column_ifexists('version_num_d', ''),\r\n    curve_s = column_ifexists('curve_s', ''),\r\n    issuer_s = column_ifexists('issuer_s', ''),\r\n    client_issuer_s = column_ifexists('client_issuer_s', ''),\r\n    client_subject_s = column_ifexists('client_subject_s', ''),\r\n    client_version_num_d = column_ifexists('client_version_num_d', ''),\r\n    client_version_s = column_ifexists('client_version_s', ''),\r\n    client_extension_s = column_ifexists('client_extension_s', ''),\r\n    client_ec_point_format_s = column_ifexists('client_ec_point_format_s', ''),\r\n    client_curve_num_s = column_ifexists('client_curve_num_s', ''),\r\n    ja3_g = column_ifexists('ja3_g', ''),\r\n    ja3s_g = column_ifexists('ja3s_g', ''),\r\n    server_extensions_s = column_ifexists('server_extensions_s', ''),\r\n\t//x509\r\n    certificate_version_d = column_ifexists('certificate_version_d', ''),\r\n    certificate_serial_s = column_ifexists('certificate_serial_s', ''),\r\n    certificate_subject_s = column_ifexists('certificate_subject_s', ''),\r\n    certificate_issuer_s = column_ifexists('certificate_issuer_s', ''),\r\n    certificate_key_alg_s = column_ifexists('certificate_key_alg_s', ''),\r\n    certificate_key_length_s = column_ifexists('certificate_key_length_s', ''),\r\n    certificate_key_type_s = column_ifexists('certificate_key_type_s', ''),\r\n    certificate_not_valid_after_d = column_ifexists('certificate_not_valid_after_d', ''),\r\n    certificate_not_valid_before_d = column_ifexists('certificate_not_valid_before_d', ''),\r\n    certificate_exponent_s = column_ifexists('certificate_exponent_s', ''),\r\n    certificate_sig_alg_s = column_ifexists('certificate_sig_alg_s', ''),\r\n    certificate_self_issued_b = column_ifexists('certificate_self_issued_b', ''),\r\n    certificate_curve_s = column_ifexists('certificate_curve_s', ''),\r\n    certificate_cn_s = column_ifexists('certificate_cn_s', ''),\r\n    san_dns_s = column_ifexists('san_dns_s', ''),\r\n    san_email_s = column_ifexists('san_email_s', ''),\r\n    san_ip_s = column_ifexists('san_ip_s', ''),\r\n    san_other_fields_b = column_ifexists('san_other_fields_b', ''),\r\n    basic_constraints_b = column_ifexists('basic_constraints_b', '')\r\n| project-rename\r\n    metadata_type = metadata_type_s,\r\n    community_id = community_id_s,\r\n    id_ip_ver = id_ip_ver_s,\r\n    id_orig_h = id_orig_h_s,\r\n    id_orig_p = id_orig_p_d,\r\n    id_resp_h = id_resp_h_s,\r\n    id_resp_p = id_resp_p_d,\r\n    resp_hostname = resp_hostname_s,\r\n    local_orig = local_orig_b,\r\n    local_resp = local_resp_b,\r\n    orig_huid = orig_huid_s,\r\n    orig_hostname = orig_hostname_s,\r\n    orig_sluid = orig_sluid_s,\r\n    resp_huid = resp_huid_s,\r\n    resp_sluid = resp_sluid_s,\r\n    sensor_uid = sensor_uid_s,\r\n    uid = uid_s,\r\n    ts = ts_d,\r\n    error = error_s,\r\n\tconn_state = conn_state_s,\r\n    duration = duration_d,\r\n    service = service_s,\r\n    proto = proto_d,\r\n    protoName = protoName_s,\r\n    orig_ip_bytes = orig_ip_bytes_d,\r\n    resp_ip_bytes = resp_ip_bytes_d,\r\n    orig_pkts = orig_pkts_d,\r\n    resp_pkts = resp_pkts_d,\r\n    session_start_time = session_start_time_d,\r\n    resp_domain = resp_domain_s,\r\n    orig_vlan_id = orig_vlan_id_d,\r\n    resp_vlan_id = resp_vlan_id_d,\r\n    first_orig_resp_data_pkt = first_orig_resp_data_pkt_s,\r\n    first_resp_orig_data_pkt = first_resp_orig_data_pkt_s,\r\n    first_orig_resp_data_pkt_time = first_orig_resp_data_pkt_time_d,\r\n    first_resp_orig_data_pkt_time = first_resp_orig_data_pkt_time_d,\r\n    first_orig_resp_pkt_time = first_orig_resp_pkt_time_d,\r\n    first_resp_orig_pkt_time = first_resp_orig_pkt_time_d,\r\n    resp_multihomed = resp_multihomed_b,\r\n    //beacon specific attributes\r\n\tbeacon_type = beacon_type_s,\r\n    beacon_uid = beacon_uid_s,\r\n    first_event_time = first_event_time_d,\r\n    last_event_time = last_event_time_d,\r\n    resp_domains = resp_domains_s,\r\n    session_count = session_count_d,\r\n    //dcerpc\r\n\trtt = rtt_s,\r\n    endpoint = endpoint_s,\r\n    username = username_s,\r\n    hostname = hostname_s,\r\n    domain = domain_s,\r\n    operation = operation_s,\r\n\t//dhcp\r\n    mac = mac_s,\r\n    assigned_ip = assigned_ip_s,\r\n    lease_time = lease_time_d,\r\n    dhcp_server_ip = dhcp_server_ip_s,\r\n    dns_server_ips = dns_server_ips_s,\r\n\t//dns\r\n    trans_id = trans_id_d,\r\n    query = query_s,\r\n    qclass = qclass_d,\r\n    qclass_name = qclass_name_s,\r\n    qtype = qtype_d,\r\n    qtype_name = qtype_name_s,\r\n    rcode = rcode_d,\r\n    rcode_name = rcode_name_s,\r\n    AA = AA_b,\r\n    TC = TC_b,\r\n    RD = RD_b,\r\n    RA = RA_b,\r\n    answers = answers_s,\r\n    TTLs = TTLs_s,\r\n    auth = auth_s,\r\n    total_answers = total_answers_d,\r\n    total_replies = total_replies_d,\r\n    rejected = rejected_b,\r\n    saw_query = saw_query_b,\r\n    saw_reply = saw_reply_b,\r\n    values = values_s,\r\n\t//http\r\n    method = method_s,\r\n    host = host_s,\r\n    uri = uri_s,\r\n    referrer = referrer_s,\r\n    user_agent = user_agent_s,\r\n    request_body_len = request_body_len_d,\r\n    response_body_len = response_body_len_d,\r\n    orig_mime_types = orig_mime_types_s,\r\n    resp_mime_types = resp_mime_types_s,\r\n    status_code = status_code_d,\r\n    status_msg = status_msg_s,\r\n    proxied = proxied_s,\r\n    cookie = cookie_s,\r\n    cookie_vars = cookie_vars_s,\r\n    request_cache_control = request_cache_control_s,\r\n    response_cache_control = response_cache_control_s,\r\n    response_expires = response_expires_s,\r\n    request_header_count = request_header_count_d,\r\n    response_header_count = response_header_count_d,\r\n    is_proxied = is_proxied_b,\r\n    host_multihomed = host_multihomed_s,\r\n\t//Kerberos\r\n    client = client_s,\r\n    data_source = data_source_s,\r\n    success = success_b,\r\n    error_code = error_code_s,\r\n    error_msg = error_msg_s,\r\n    request_type = request_type_s,\r\n    protocol = protocol_s,\r\n    reply_timestamp = reply_timestamp_d,\r\n    orig_host_observed_privilege = orig_host_observed_privilege_d,\r\n    req_ciphers = req_ciphers_s,\r\n    rep_cipher = rep_cipher_s,\r\n    //ldap\r\n    message_id = message_id_d,\r\n    base_object = base_object_s,\r\n    query_scope = query_scope_s,\r\n    result = result_s,\r\n    matched_dn = matched_dn_s,\r\n    duration_s = duration_s,\r\n    attributes = attributes_s,\r\n    bind_error_count = bind_error_count_d,\r\n    encrypted_sasl_payload_count = encrypted_sasl_payload_count_d,\r\n    logon_failure_error_count = logon_failure_error_count_s,\r\n    response_bytes = response_bytes_s,\r\n    request_bytes = request_bytes_s,\r\n    result_code = result_code_s,\r\n    result_count = result_count_d,\r\n    is_query = is_query_b,\r\n    is_close = is_close_b,\r\n\t//ntlm\r\n    status = status_d,\r\n\t//rdp\r\n    keyboard_layout = keyboard_layout_s,\r\n    client_build = client_build_d,\r\n    client_dig_protocol_id = client_dig_protocol_id_d,\r\n    client_dig_product_id = client_dig_product_id_d,\r\n    client_name = client_name_s,\r\n    desktop_width = desktop_width_d,\r\n    desktop_height = desktop_height_d,\r\n\t//smbfiles\r\n    action = action_s,\r\n    delete_on_close = delete_on_close_b,\r\n    path = path_s,\r\n    name = name_s,\r\n    prev_name = prev_name_s,\r\n    version = version_s,\r\n\t//smtp\r\n    helo = helo_s,\r\n    mail_from = mail_from_s,\r\n    rcpt_to = rcpt_to_s,\r\n    date_msg = date_d,\r\n    from = from_s,\r\n    to_msg = to_s,\r\n    cc = cc_s,\r\n    reply_to = reply_to_s,\r\n    msgid = msgid_d,\r\n    in_reply_to = in_reply_to_s,\r\n    subject = subject_s,\r\n    x_originating_ip = x_originating_ip_s,\r\n    first_received = first_received_s,\r\n    second_received = second_received_s,\r\n    useragent = useragent_s,\r\n    tls = tls_s,\r\n    spf_helo = spf_helo_s,\r\n    spf_mailfrom = spf_mailfrom_s,\r\n    dkim_status = dkim_status_s,\r\n    dmarc_status = dmarc_status_s,\r\n\t//ssh\r\n    server = server_s,\r\n    cipher_alg = cipher_alg_s,\r\n    mac_alg = mac_alg_s,\r\n    compression_alg = compression_alg_s,\r\n    kex_alg = kex_alg_s,\r\n    host_key_alg = host_key_alg_s,\r\n    host_key = host_key_s,\r\n    hassh = hassh_g,\r\n    hasshServer = hasshServer_g,\r\n\t//ssl\r\n    server_name = server_name_s,\r\n    established = established_b,\r\n    next_protocol = next_protocol_s,\r\n    cipher = cipher_s,\r\n    version_num = version_num_d,\r\n    curve = curve_s,\r\n    issuer = issuer_s,\r\n    client_issuer = client_issuer_s,\r\n    client_subject = client_subject_s,\r\n    client_version_num = client_version_num_d,\r\n    client_version = client_version_s,\r\n    client_extension = client_extension_s,\r\n    client_ec_point_format = client_ec_point_format_s,\r\n    client_curve_num = client_curve_num_s,\r\n    ja3 = ja3_g,\r\n    ja3s = ja3s_g,\r\n    server_extensions = server_extensions_s,\r\n\t//x509\r\n    certificate_version = certificate_version_d,\r\n    certificate_serial = certificate_serial_s,\r\n    certificate_subject = certificate_subject_s,\r\n    certificate_issuer = certificate_issuer_s,\r\n    certificate_key_alg = certificate_key_alg_s,\r\n    certificate_key_length = certificate_key_length_s,\r\n    certificate_key_type = certificate_key_type_s,\r\n    certificate_not_valid_after = certificate_not_valid_after_d,\r\n    certificate_not_valid_before = certificate_not_valid_before_d,\r\n    certificate_exponent = certificate_exponent_s,\r\n    certificate_sig_alg = certificate_sig_alg_s,\r\n    certificate_self_issued = certificate_self_issued_b,\r\n    certificate_curve = certificate_curve_s,\r\n    certificate_cn = certificate_cn_s,\r\n    san_dns = san_dns_s,\r\n    san_email = san_email_s,\r\n    san_ip = san_ip_s,\r\n    san_other_fields = san_other_fields_b,\r\n    basic_constraints = basic_constraints_b",
        "version": 1
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2022-01-01-preview",
      "location": "[parameters('workspace-location')]",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('_parserId1'),'/'))))]",
      "dependsOn": [
        "[variables('_parserId1')]"
      ],
      "properties": {
        "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), variables('parserName1'))]",
        "contentId": "[variables('_parserContentId1')]",
        "kind": "Parser",
        "version": "[variables('parserVersion1')]",
        "source": {
          "kind": "Solution",
          "name": "Vectra AI Stream",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "Microsoft",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "Vectra AI",
          "email": "tme@vectra.ai",
          "tier": "Partner",
          "link": "https://www.vectra.ai/support"
        }
      }
    },
    {
      "type": "Microsoft.Resources/templateSpecs",
      "apiVersion": "2021-05-01",
      "name": "[variables('huntingQueryTemplateSpecName1')]",
      "location": "[parameters('workspace-location')]",
      "tags": {
        "hidden-sentinelWorkspaceId": "[variables('workspaceResourceId')]",
        "hidden-sentinelContentType": "HuntingQuery"
      },
      "properties": {
        "description": "Vectra AI Stream Hunting Query 1 with template",
        "displayName": "Vectra AI Stream Hunting Query template"
      }
    },
    {
      "type": "Microsoft.Resources/templateSpecs/versions",
      "apiVersion": "2021-05-01",
      "name": "[concat(variables('huntingQueryTemplateSpecName1'),'/',variables('huntingQueryVersion1'))]",
      "location": "[parameters('workspace-location')]",
      "tags": {
        "hidden-sentinelWorkspaceId": "[variables('workspaceResourceId')]",
        "hidden-sentinelContentType": "HuntingQuery"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/templateSpecs', variables('huntingQueryTemplateSpecName1'))]"
      ],
      "properties": {
        "description": "VectraHighVolumeOfNXDOMAIN_HuntingQueries Hunting Query with template version 2.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('huntingQueryVersion1')]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/savedSearches",
              "apiVersion": "2020-08-01",
              "name": "Vectra_AI_Stream_Hunting_Query_1",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "Vectra AI - Potential Exfiltration over DNS",
                "category": "Hunting Queries",
                "query": "//Adjust the threshold as desired (default is 500)\nlet min_fail_query = 500;\nVectraStream\n| where metadata_type == \"metadata_dns\"\n| where rcode_name in~ ('NXDOMAIN', 'SERVFAIL')\n| summarize count() by orig_hostname, id_orig_h, bin(TimeGenerated, 1h)\n| where count_ > min_fail_query\n| extend HostCustomEntity = orig_hostname, IPCustomEntity = id_orig_h\n",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": "Query searches for high volume of DNS resolutions which return non existent domain. \nMetadata required = metadata_dns"
                  },
                  {
                    "name": "tactics",
                    "value": "CommandAndControl,Exfiltration"
                  },
                  {
                    "name": "techniques",
                    "value": "T1048.003,T1071.004"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('HuntingQuery-', last(split(variables('huntingQueryId1'),'/'))))]",
              "properties": {
                "description": "Vectra AI Stream Hunting Query 1",
                "parentId": "[variables('huntingQueryId1')]",
                "contentId": "[variables('_huntingQuerycontentId1')]",
                "kind": "HuntingQuery",
                "version": "[variables('huntingQueryVersion1')]",
                "source": {
                  "kind": "Solution",
                  "name": "Vectra AI Stream",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra AI",
                  "email": "tme@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Resources/templateSpecs",
      "apiVersion": "2021-05-01",
      "name": "[variables('huntingQueryTemplateSpecName2')]",
      "location": "[parameters('workspace-location')]",
      "tags": {
        "hidden-sentinelWorkspaceId": "[variables('workspaceResourceId')]",
        "hidden-sentinelContentType": "HuntingQuery"
      },
      "properties": {
        "description": "Vectra AI Stream Hunting Query 2 with template",
        "displayName": "Vectra AI Stream Hunting Query template"
      }
    },
    {
      "type": "Microsoft.Resources/templateSpecs/versions",
      "apiVersion": "2021-05-01",
      "name": "[concat(variables('huntingQueryTemplateSpecName2'),'/',variables('huntingQueryVersion2'))]",
      "location": "[parameters('workspace-location')]",
      "tags": {
        "hidden-sentinelWorkspaceId": "[variables('workspaceResourceId')]",
        "hidden-sentinelContentType": "HuntingQuery"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/templateSpecs', variables('huntingQueryTemplateSpecName2'))]"
      ],
      "properties": {
        "description": "VectraMaliciousToolFileCopy_HuntingQueries Hunting Query with template version 2.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('huntingQueryVersion2')]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/savedSearches",
              "apiVersion": "2020-08-01",
              "name": "Vectra_AI_Stream_Hunting_Query_2",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "Vectra AI - Malicious Tools File Copy",
                "category": "Hunting Queries",
                "query": "let suspicious_names = dynamic([\"bloodhound.py\",\"BloodHound.py\",\"ADRecon.ps1\",\"ADRecon\",\"CrackMapExec\",\"crackmapexec\",\"Invoke-HoneypotBuster.ps1\",\"HoneypotBuster\",\"impacket\",\"impacket-maste\",\"Inveigh\",\"Inveigh-master\",\"Inveigh.ps1\",\"Inveigh-relay.ps1\",\"LaZagne\",\"laZagne.py\",\"laZagne-master\",\"mimipenguin-maste\",\"mimipenguin.py\",\"mimikatz.exe\",\"mimidrv.sys\",\"mimilib.dll\",\"nishang\",\"Nishang.psm1\",\"nishang.psm1\",\"PowerLessShell\",\"csproj.bat\",\"PowerSploit\",\"PowerUpSQL\",\"PsExec.exe\",\"PsExec64.exe\",\"procdump.exe\",\"Procdump.exe\",\"lsass.dmp\",\"lsass.DMP\",\"ReflectiveDLLInjection\",\"inject.exe\",\"inject.arm.exe\",\"inject.x64.exe\",\"reflective_dll.x64.dll\",\"reflective_dll.dll\",\"fingerprint.py\",\"packets.py\",\"Responder.py\",\"Responder-master\",\"BrowserListener.py\",\"DHCP.py\",\"DHCP_Auto.sh\",\"FindSMB2UPTime.py\",\"FindSQLSrv.py\",\"Icmp-Redirect.py\",\"RelayPackets.py\",\"SMBRelay.py\",\"Export-PotentiallyCrackableAccounts.ps1\",\"Find-PotentiallyCrackableAccounts.ps1\",\"Get-TGSCipher.ps1\",\"RiskySPNs.psd1\",\"RiskySPNs.psm\",\"RiskySPNs-master\",\"SessionGopher.ps1\",\"BloodHound.zip\",\"WorsePDF\"]);\nVectraStream\n| where metadata_type == \"metadata_smbfiles\"\n| where name has_any (suspicious_names)\n| extend HostCustomEntity = orig_hostname, IPCustomEntity = id_orig_h, timestamp = TimeGenerated\n",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": "Query searches for suspicious malicious file names copy over SMB.\nMetadata required = metadata_smbfiles"
                  },
                  {
                    "name": "tactics",
                    "value": "CredentialAccess,LateralMovement,Collection"
                  },
                  {
                    "name": "techniques",
                    "value": "T1570"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('HuntingQuery-', last(split(variables('huntingQueryId2'),'/'))))]",
              "properties": {
                "description": "Vectra AI Stream Hunting Query 2",
                "parentId": "[variables('huntingQueryId2')]",
                "contentId": "[variables('_huntingQuerycontentId2')]",
                "kind": "HuntingQuery",
                "version": "[variables('huntingQueryVersion2')]",
                "source": {
                  "kind": "Solution",
                  "name": "Vectra AI Stream",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra AI",
                  "email": "tme@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Resources/templateSpecs",
      "apiVersion": "2021-05-01",
      "name": "[variables('huntingQueryTemplateSpecName3')]",
      "location": "[parameters('workspace-location')]",
      "tags": {
        "hidden-sentinelWorkspaceId": "[variables('workspaceResourceId')]",
        "hidden-sentinelContentType": "HuntingQuery"
      },
      "properties": {
        "description": "Vectra AI Stream Hunting Query 3 with template",
        "displayName": "Vectra AI Stream Hunting Query template"
      }
    },
    {
      "type": "Microsoft.Resources/templateSpecs/versions",
      "apiVersion": "2021-05-01",
      "name": "[concat(variables('huntingQueryTemplateSpecName3'),'/',variables('huntingQueryVersion3'))]",
      "location": "[parameters('workspace-location')]",
      "tags": {
        "hidden-sentinelWorkspaceId": "[variables('workspaceResourceId')]",
        "hidden-sentinelContentType": "HuntingQuery"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/templateSpecs', variables('huntingQueryTemplateSpecName3'))]"
      ],
      "properties": {
        "description": "VectraNetbiosLLMNRUsage_HuntingQueries Hunting Query with template version 2.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('huntingQueryVersion3')]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/savedSearches",
              "apiVersion": "2020-08-01",
              "name": "Vectra_AI_Stream_Hunting_Query_3",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "Vectra AI - Potential LLMNR/NBT-NS Poisoning and SMB Relay",
                "category": "Hunting Queries",
                "query": "//whitelist IP addresses from the result  (default is empty)\nlet whitelist = dynamic([\"\"]);\nVectraStream\n| where metadata_type == \"metadata_isession\"\n| where id_resp_p == \"137\" or id_resp_p == \"5535\"\n| where protoName == \"UDP\"\n| where id_resp_h !in (whitelist)\n| extend HostCustomEntity = resp_hostname, IPCustomEntity = id_resp_h, timestamp = TimeGenerated\n",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": "Query searches for potential LLMNR/NBT-NS Poisoning and SMB Relay. The host of interest is the one responding to such request.\nBy responding to LLMNR/NBT-NS network traffic, adversaries may spoof an authoritative source for name resolution to force communication with an adversary controlled system. This activity may be used to collect or relay authentication materials.\nMetadata required = metadata_isession"
                  },
                  {
                    "name": "tactics",
                    "value": "CredentialAccess,Collection"
                  },
                  {
                    "name": "techniques",
                    "value": "T1557.001"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('HuntingQuery-', last(split(variables('huntingQueryId3'),'/'))))]",
              "properties": {
                "description": "Vectra AI Stream Hunting Query 3",
                "parentId": "[variables('huntingQueryId3')]",
                "contentId": "[variables('_huntingQuerycontentId3')]",
                "kind": "HuntingQuery",
                "version": "[variables('huntingQueryVersion3')]",
                "source": {
                  "kind": "Solution",
                  "name": "Vectra AI Stream",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra AI",
                  "email": "tme@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Resources/templateSpecs",
      "apiVersion": "2021-05-01",
      "name": "[variables('huntingQueryTemplateSpecName4')]",
      "location": "[parameters('workspace-location')]",
      "tags": {
        "hidden-sentinelWorkspaceId": "[variables('workspaceResourceId')]",
        "hidden-sentinelContentType": "HuntingQuery"
      },
      "properties": {
        "description": "Vectra AI Stream Hunting Query 4 with template",
        "displayName": "Vectra AI Stream Hunting Query template"
      }
    },
    {
      "type": "Microsoft.Resources/templateSpecs/versions",
      "apiVersion": "2021-05-01",
      "name": "[concat(variables('huntingQueryTemplateSpecName4'),'/',variables('huntingQueryVersion4'))]",
      "location": "[parameters('workspace-location')]",
      "tags": {
        "hidden-sentinelWorkspaceId": "[variables('workspaceResourceId')]",
        "hidden-sentinelContentType": "HuntingQuery"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/templateSpecs', variables('huntingQueryTemplateSpecName4'))]"
      ],
      "properties": {
        "description": "VectraPoshC2_HuntingQueries Hunting Query with template version 2.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('huntingQueryVersion4')]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/savedSearches",
              "apiVersion": "2020-08-01",
              "name": "Vectra_AI_Stream_Hunting_Query_4",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "Vectra AI - Possible PoshC2 Tunnel",
                "category": "Hunting Queries",
                "query": "VectraStream\n| where metadata_type == \"metadata_ssl\"\n| where ja3 == \"e84d3d1743f1da2f03fe6296bd97b7d6\"\n| project TimeGenerated, orig_hostname, id_orig_h, id_resp_h, id_resp_p, service, version, server_name, ja3\n| extend HostCustomEntity = orig_hostname, IPCustomEntity = id_orig_h, timestamp = TimeGenerated\n",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": "Query searches PoshC2 Tunnel.\nPoshC2 can use protocols like HTTPS for command and control traffic\nMetadata required = metadata_ssl"
                  },
                  {
                    "name": "tactics",
                    "value": "CommandAndControl"
                  },
                  {
                    "name": "techniques",
                    "value": "T1071.001"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('HuntingQuery-', last(split(variables('huntingQueryId4'),'/'))))]",
              "properties": {
                "description": "Vectra AI Stream Hunting Query 4",
                "parentId": "[variables('huntingQueryId4')]",
                "contentId": "[variables('_huntingQuerycontentId4')]",
                "kind": "HuntingQuery",
                "version": "[variables('huntingQueryVersion4')]",
                "source": {
                  "kind": "Solution",
                  "name": "Vectra AI Stream",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra AI",
                  "email": "tme@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Resources/templateSpecs",
      "apiVersion": "2021-05-01",
      "name": "[variables('huntingQueryTemplateSpecName5')]",
      "location": "[parameters('workspace-location')]",
      "tags": {
        "hidden-sentinelWorkspaceId": "[variables('workspaceResourceId')]",
        "hidden-sentinelContentType": "HuntingQuery"
      },
      "properties": {
        "description": "Vectra AI Stream Hunting Query 5 with template",
        "displayName": "Vectra AI Stream Hunting Query template"
      }
    },
    {
      "type": "Microsoft.Resources/templateSpecs/versions",
      "apiVersion": "2021-05-01",
      "name": "[concat(variables('huntingQueryTemplateSpecName5'),'/',variables('huntingQueryVersion5'))]",
      "location": "[parameters('workspace-location')]",
      "tags": {
        "hidden-sentinelWorkspaceId": "[variables('workspaceResourceId')]",
        "hidden-sentinelContentType": "HuntingQuery"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/templateSpecs', variables('huntingQueryTemplateSpecName5'))]"
      ],
      "properties": {
        "description": "VectraPotentialDCSync_HuntingQueries Hunting Query with template version 2.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('huntingQueryVersion5')]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/savedSearches",
              "apiVersion": "2020-08-01",
              "name": "Vectra_AI_Stream_Hunting_Query_5",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "Vectra AI - Potential DCSync Attack",
                "category": "Hunting Queries",
                "query": "//Add IP addresses of your Domain Dontrollers (default is empty)\nlet IpDC = dynamic([\"\"]);\n//Add hostnames of your Domain Dontrollers (default is empty)\nlet NameDC = dynamic([\"\"]);\nVectraStream\n| where metadata_type == \"metadata_dcerpc\"\n| where endpoint == \"drsuapi\" and operation == \"DRSGetNCChanges\"\n| where id_orig_h !in (IpDC) or orig_hostname !in (NameDC)\n| extend AccountCustomEntity = username, HostCustomEntity = orig_hostname, IPCustomEntity = id_orig_h, timestamp = TimeGenerated\n",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": "Query searches for potential DCSync Attack. \nIn this attack, an adversary attempt to access credentials and other sensitive information by abusing a Windows Domain Controller's application programming interface (API)\nMetadata required = metadata_dcerpc"
                  },
                  {
                    "name": "tactics",
                    "value": "CredentialAccess"
                  },
                  {
                    "name": "techniques",
                    "value": "T1003.006"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('HuntingQuery-', last(split(variables('huntingQueryId5'),'/'))))]",
              "properties": {
                "description": "Vectra AI Stream Hunting Query 5",
                "parentId": "[variables('huntingQueryId5')]",
                "contentId": "[variables('_huntingQuerycontentId5')]",
                "kind": "HuntingQuery",
                "version": "[variables('huntingQueryVersion5')]",
                "source": {
                  "kind": "Solution",
                  "name": "Vectra AI Stream",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra AI",
                  "email": "tme@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Resources/templateSpecs",
      "apiVersion": "2021-05-01",
      "name": "[variables('huntingQueryTemplateSpecName6')]",
      "location": "[parameters('workspace-location')]",
      "tags": {
        "hidden-sentinelWorkspaceId": "[variables('workspaceResourceId')]",
        "hidden-sentinelContentType": "HuntingQuery"
      },
      "properties": {
        "description": "Vectra AI Stream Hunting Query 6 with template",
        "displayName": "Vectra AI Stream Hunting Query template"
      }
    },
    {
      "type": "Microsoft.Resources/templateSpecs/versions",
      "apiVersion": "2021-05-01",
      "name": "[concat(variables('huntingQueryTemplateSpecName6'),'/',variables('huntingQueryVersion6'))]",
      "location": "[parameters('workspace-location')]",
      "tags": {
        "hidden-sentinelWorkspaceId": "[variables('workspaceResourceId')]",
        "hidden-sentinelContentType": "HuntingQuery"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/templateSpecs', variables('huntingQueryTemplateSpecName6'))]"
      ],
      "properties": {
        "description": "VectraSuspectedKali_HuntingQueries Hunting Query with template version 2.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('huntingQueryVersion6')]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/savedSearches",
              "apiVersion": "2020-08-01",
              "name": "Vectra_AI_Stream_Hunting_Query_6",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "Vectra AI - Possible Kali Linux Detected",
                "category": "Hunting Queries",
                "query": "VectraStream\n| where metadata_type == \"metadata_httpsessioninfo\"\n| where user_agent matches regex \".*[lL]inux.*[kK]ali.*\"\n| extend HostCustomEntity = orig_hostname, IPCustomEntity = id_orig_h, timestamp = TimeGenerated\n",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": "Query searches Kali Linux machine in your environment. \nMetadata required = metadata_httpsessioninfo"
                  },
                  {
                    "name": "tactics",
                    "value": "Exfiltration"
                  },
                  {
                    "name": "techniques",
                    "value": "T1048.003"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('HuntingQuery-', last(split(variables('huntingQueryId6'),'/'))))]",
              "properties": {
                "description": "Vectra AI Stream Hunting Query 6",
                "parentId": "[variables('huntingQueryId6')]",
                "contentId": "[variables('_huntingQuerycontentId6')]",
                "kind": "HuntingQuery",
                "version": "[variables('huntingQueryVersion6')]",
                "source": {
                  "kind": "Solution",
                  "name": "Vectra AI Stream",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra AI",
                  "email": "tme@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Resources/templateSpecs",
      "apiVersion": "2021-05-01",
      "name": "[variables('huntingQueryTemplateSpecName7')]",
      "location": "[parameters('workspace-location')]",
      "tags": {
        "hidden-sentinelWorkspaceId": "[variables('workspaceResourceId')]",
        "hidden-sentinelContentType": "HuntingQuery"
      },
      "properties": {
        "description": "Vectra AI Stream Hunting Query 7 with template",
        "displayName": "Vectra AI Stream Hunting Query template"
      }
    },
    {
      "type": "Microsoft.Resources/templateSpecs/versions",
      "apiVersion": "2021-05-01",
      "name": "[concat(variables('huntingQueryTemplateSpecName7'),'/',variables('huntingQueryVersion7'))]",
      "location": "[parameters('workspace-location')]",
      "tags": {
        "hidden-sentinelWorkspaceId": "[variables('workspaceResourceId')]",
        "hidden-sentinelContentType": "HuntingQuery"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/templateSpecs', variables('huntingQueryTemplateSpecName7'))]"
      ],
      "properties": {
        "description": "VectraSuspiciousBeacon_HuntingQueries Hunting Query with template version 2.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('huntingQueryVersion7')]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/savedSearches",
              "apiVersion": "2020-08-01",
              "name": "Vectra_AI_Stream_Hunting_Query_7",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "Vectra AI - Beaconing Behaviors",
                "category": "Hunting Queries",
                "query": "//Whitelist source IP (default is empty)\nlet whitelist_src_ip = dynamic([\"\"]);\n//Whitelist domain names (default is empty)\nlet whitelist_domain = dynamic([\"\"]);\nVectraStream\n| where metadata_type == \"metadata_beacon\"\n| where id_orig_h !in (whitelist_src_ip) or orig_hostname !in (whitelist_domain)\n| summarize  arg_max(session_count, *) by orig_hostname, id_resp_h\n| project ts, orig_hostname, id_orig_h, id_resp_h, id_resp_p, beacon_type, resp_domains, session_count\n| extend HostCustomEntity = orig_hostname, IPCustomEntity = id_orig_h\n",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": "Query searches for beaconing behavior. \nVectra uses its AI to enrich metadata and detect beaconing behaviors within your environment.\nMetadata required = metadata_beacon"
                  },
                  {
                    "name": "tactics",
                    "value": "CommandAndControl"
                  },
                  {
                    "name": "techniques",
                    "value": "T1095,T1071,T1573,T1008,T1095,T1571,T1219"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('HuntingQuery-', last(split(variables('huntingQueryId7'),'/'))))]",
              "properties": {
                "description": "Vectra AI Stream Hunting Query 7",
                "parentId": "[variables('huntingQueryId7')]",
                "contentId": "[variables('_huntingQuerycontentId7')]",
                "kind": "HuntingQuery",
                "version": "[variables('huntingQueryVersion7')]",
                "source": {
                  "kind": "Solution",
                  "name": "Vectra AI Stream",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra AI",
                  "email": "tme@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Resources/templateSpecs",
      "apiVersion": "2021-05-01",
      "name": "[variables('huntingQueryTemplateSpecName8')]",
      "location": "[parameters('workspace-location')]",
      "tags": {
        "hidden-sentinelWorkspaceId": "[variables('workspaceResourceId')]",
        "hidden-sentinelContentType": "HuntingQuery"
      },
      "properties": {
        "description": "Vectra AI Stream Hunting Query 8 with template",
        "displayName": "Vectra AI Stream Hunting Query template"
      }
    },
    {
      "type": "Microsoft.Resources/templateSpecs/versions",
      "apiVersion": "2021-05-01",
      "name": "[concat(variables('huntingQueryTemplateSpecName8'),'/',variables('huntingQueryVersion8'))]",
      "location": "[parameters('workspace-location')]",
      "tags": {
        "hidden-sentinelWorkspaceId": "[variables('workspaceResourceId')]",
        "hidden-sentinelContentType": "HuntingQuery"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/templateSpecs', variables('huntingQueryTemplateSpecName8'))]"
      ],
      "properties": {
        "description": "VectraSuspiciousLongDNSQueries_HuntingQueries Hunting Query with template version 2.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('huntingQueryVersion8')]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/savedSearches",
              "apiVersion": "2020-08-01",
              "name": "Vectra_AI_Stream_Hunting_Query_8",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "Vectra AI - Suspicious Long DNS Queries",
                "category": "Hunting Queries",
                "query": "VectraStream\n| where metadata_type == \"metadata_dns\"\n| extend querylength = strlen(['query'])\n| summarize count() by querylength, orig_hostname, id_orig_h\n| sort by querylength desc \n| extend HostCustomEntity = orig_hostname, IPCustomEntity = id_orig_h\n",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": "Query searches long DNS queries.\nA high volume of long DNS queries may indicate the usage of DNS Tunneling.\nMetadata required = metadata_dns"
                  },
                  {
                    "name": "tactics",
                    "value": "CommandAndControl,Exfiltration"
                  },
                  {
                    "name": "techniques",
                    "value": "T1071.004,T1048.003"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('HuntingQuery-', last(split(variables('huntingQueryId8'),'/'))))]",
              "properties": {
                "description": "Vectra AI Stream Hunting Query 8",
                "parentId": "[variables('huntingQueryId8')]",
                "contentId": "[variables('_huntingQuerycontentId8')]",
                "kind": "HuntingQuery",
                "version": "[variables('huntingQueryVersion8')]",
                "source": {
                  "kind": "Solution",
                  "name": "Vectra AI Stream",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra AI",
                  "email": "tme@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Resources/templateSpecs",
      "apiVersion": "2021-05-01",
      "name": "[variables('huntingQueryTemplateSpecName9')]",
      "location": "[parameters('workspace-location')]",
      "tags": {
        "hidden-sentinelWorkspaceId": "[variables('workspaceResourceId')]",
        "hidden-sentinelContentType": "HuntingQuery"
      },
      "properties": {
        "description": "Vectra AI Stream Hunting Query 9 with template",
        "displayName": "Vectra AI Stream Hunting Query template"
      }
    },
    {
      "type": "Microsoft.Resources/templateSpecs/versions",
      "apiVersion": "2021-05-01",
      "name": "[concat(variables('huntingQueryTemplateSpecName9'),'/',variables('huntingQueryVersion9'))]",
      "location": "[parameters('workspace-location')]",
      "tags": {
        "hidden-sentinelWorkspaceId": "[variables('workspaceResourceId')]",
        "hidden-sentinelContentType": "HuntingQuery"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/templateSpecs', variables('huntingQueryTemplateSpecName9'))]"
      ],
      "properties": {
        "description": "VectraSuspiciousNbOfSubDomains_HuntingQueries Hunting Query with template version 2.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('huntingQueryVersion9')]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/savedSearches",
              "apiVersion": "2020-08-01",
              "name": "Vectra_AI_Stream_Hunting_Query_9",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "Vectra AI - Suspicious number of sub-domains",
                "category": "Hunting Queries",
                "query": "//Adjust the threshold as desired (default is 500)\nlet min_sub_domains = 500;\nVectraStream\n| where metadata_type == \"metadata_dns\"\n| extend top_domain = extract(@\"(?:(?P<rex_sub_domain>[^\\.\\s]+)\\.)??(?P<rex_domain>(?:(?P<rex_domain_no_tld>[^\\.\\s]+)\\.)?(?P<rex_tld>[^\\.\\s]{2,}))$\",2,['query'])\n| summarize sub_domains=dcount(['query']) by top_domain, orig_hostname, id_orig_h\n| where sub_domains > min_sub_domains\n| extend HostCustomEntity = orig_hostname, IPCustomEntity = id_orig_h\n",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": "Query searches for number of sub-domains attached per domain\nA high volume of sub-domains may indicate the usage of DNS Tunneling.\nMetadata required = metadata_dns"
                  },
                  {
                    "name": "tactics",
                    "value": "CommandAndControl,Exfiltration"
                  },
                  {
                    "name": "techniques",
                    "value": "T1071.004,T1048.003"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('HuntingQuery-', last(split(variables('huntingQueryId9'),'/'))))]",
              "properties": {
                "description": "Vectra AI Stream Hunting Query 9",
                "parentId": "[variables('huntingQueryId9')]",
                "contentId": "[variables('_huntingQuerycontentId9')]",
                "kind": "HuntingQuery",
                "version": "[variables('huntingQueryVersion9')]",
                "source": {
                  "kind": "Solution",
                  "name": "Vectra AI Stream",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra AI",
                  "email": "tme@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Resources/templateSpecs",
      "apiVersion": "2021-05-01",
      "name": "[variables('huntingQueryTemplateSpecName10')]",
      "location": "[parameters('workspace-location')]",
      "tags": {
        "hidden-sentinelWorkspaceId": "[variables('workspaceResourceId')]",
        "hidden-sentinelContentType": "HuntingQuery"
      },
      "properties": {
        "description": "Vectra AI Stream Hunting Query 10 with template",
        "displayName": "Vectra AI Stream Hunting Query template"
      }
    },
    {
      "type": "Microsoft.Resources/templateSpecs/versions",
      "apiVersion": "2021-05-01",
      "name": "[concat(variables('huntingQueryTemplateSpecName10'),'/',variables('huntingQueryVersion10'))]",
      "location": "[parameters('workspace-location')]",
      "tags": {
        "hidden-sentinelWorkspaceId": "[variables('workspaceResourceId')]",
        "hidden-sentinelContentType": "HuntingQuery"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/templateSpecs', variables('huntingQueryTemplateSpecName10'))]"
      ],
      "properties": {
        "description": "VectraUnsecuredCredsGPP_HuntingQueries Hunting Query with template version 2.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('huntingQueryVersion10')]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/savedSearches",
              "apiVersion": "2020-08-01",
              "name": "Vectra_AI_Stream_Hunting_Query_10",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "Vectra AI - Suspicious Unsecured Credentials Group Policy Preferences",
                "category": "Hunting Queries",
                "query": "//List of suspicipous name in SYSVOL share\nlet filenames = dynamic([\"scheduledTasks.xml\",\"groups.xml\",\"services.xml\",\"datasources.xml\",\"printers.xml\",\"drives.xml\"]);\nVectraStream\n| where metadata_type == \"metadata_smbfiles\"\n| where name contains (filenames)\n| where path matches regex \".*sysvol.*\"\n| where action == \"SMB::FILE_READ\" or action == \"SMB::FILE_OPEN\"\n| extend HostCustomEntity = orig_hostname, IPCustomEntity = id_orig_h, timestamp = TimeGenerated\n",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": "Query searches for suspicious Unsecured Credential using GPP Attack. \nAn adversary may look for legacy GPPs containing credentials, stored in an insecure manner. GPPs files are all stored on the domain controller in the SYSVOL share.\nMetadata required = metadata_smbfiles"
                  },
                  {
                    "name": "tactics",
                    "value": "CredentialAccess"
                  },
                  {
                    "name": "techniques",
                    "value": "T1552.006"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('HuntingQuery-', last(split(variables('huntingQueryId10'),'/'))))]",
              "properties": {
                "description": "Vectra AI Stream Hunting Query 10",
                "parentId": "[variables('huntingQueryId10')]",
                "contentId": "[variables('_huntingQuerycontentId10')]",
                "kind": "HuntingQuery",
                "version": "[variables('huntingQueryVersion10')]",
                "source": {
                  "kind": "Solution",
                  "name": "Vectra AI Stream",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra AI",
                  "email": "tme@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2022-01-01-preview",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "version": "2.0.0",
        "kind": "Solution",
        "contentSchemaVersion": "2.0.0",
        "contentId": "[variables('_solutionId')]",
        "parentId": "[variables('_solutionId')]",
        "source": {
          "kind": "Solution",
          "name": "Vectra AI Stream",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "Microsoft",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "Vectra AI",
          "email": "tme@vectra.ai",
          "tier": "Partner",
          "link": "https://www.vectra.ai/support"
        },
        "dependencies": {
          "operator": "AND",
          "criteria": [
            {
              "kind": "DataConnector",
              "contentId": "[variables('_dataConnectorContentId1')]",
              "version": "[variables('dataConnectorVersion1')]"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('_parserContentId1')]",
              "version": "[variables('parserVersion1')]"
            },
            {
              "kind": "HuntingQuery",
              "contentId": "[variables('_huntingQuerycontentId1')]",
              "version": "[variables('huntingQueryVersion1')]"
            },
            {
              "kind": "HuntingQuery",
              "contentId": "[variables('_huntingQuerycontentId2')]",
              "version": "[variables('huntingQueryVersion2')]"
            },
            {
              "kind": "HuntingQuery",
              "contentId": "[variables('_huntingQuerycontentId3')]",
              "version": "[variables('huntingQueryVersion3')]"
            },
            {
              "kind": "HuntingQuery",
              "contentId": "[variables('_huntingQuerycontentId4')]",
              "version": "[variables('huntingQueryVersion4')]"
            },
            {
              "kind": "HuntingQuery",
              "contentId": "[variables('_huntingQuerycontentId5')]",
              "version": "[variables('huntingQueryVersion5')]"
            },
            {
              "kind": "HuntingQuery",
              "contentId": "[variables('_huntingQuerycontentId6')]",
              "version": "[variables('huntingQueryVersion6')]"
            },
            {
              "kind": "HuntingQuery",
              "contentId": "[variables('_huntingQuerycontentId7')]",
              "version": "[variables('huntingQueryVersion7')]"
            },
            {
              "kind": "HuntingQuery",
              "contentId": "[variables('_huntingQuerycontentId8')]",
              "version": "[variables('huntingQueryVersion8')]"
            },
            {
              "kind": "HuntingQuery",
              "contentId": "[variables('_huntingQuerycontentId9')]",
              "version": "[variables('huntingQueryVersion9')]"
            },
            {
              "kind": "HuntingQuery",
              "contentId": "[variables('_huntingQuerycontentId10')]",
              "version": "[variables('huntingQueryVersion10')]"
            }
          ]
        },
        "firstPublishDate": "2021-10-18",
        "providers": [
          "Vectra AI"
        ],
        "categories": {
          "domains": [
            "Security – Network"
          ]
        }
      },
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/', variables('_solutionId'))]"
    }
  ],
  "outputs": {}
}
